{
	"config": {
		"indexing": "full",
		"lang": ["en"],
		"min_search_length": 3,
		"prebuild_index": false,
		"separator": "[\\s\\-]+"
	},
	"docs": [{
		"location": "",
		"text": "Introduction Gitlint is a git commit message linter written in python: it checks your commit messages for style. Great for use as a commit-msg git hook or as part of your gating script in a CI pipeline (e.g. Jenkins) . Note Gitlint support for Windows is experimental , and there are some known issues . Also, gitlint is not the only git commit message linter out there, if you are looking for an alternative written in a different language, have a look at fit-commit (Ruby), node-commit-msg (Node.js) or commitlint (Node.js). Important Gitlint no longer supports Python 2.7 and Python 3.5 as they have reached End-Of-Life . The last gitlint version to support Python 2.7 and Python 3.5 is 0.14.0 (released on October 24th, 2020). Features Commit message hook : Auto-trigger validations against new commit message right when you're committing . Also works with pre-commit . Easily integrated : Gitlint is designed to work with your own scripts or CI system . Sane defaults: Many of gitlint's validations are based on well-known , community , standards , others are based on checks that we've found useful throughout the years. Easily configurable: Gitlint has sane defaults, but you can also easily customize it to your own liking . Community contributed rules : Conventions that are common but not universal can be selectively enabled . User-defined rules: Want to do more then what gitlint offers out of the box? Write your own user defined rules . Full unicode support: Lint your Russian, Chinese or Emoji commit messages with ease! Production-ready: Gitlint checks a lot of the boxes you're looking for: actively maintained, high unit test coverage, integration tests, python code standards (pep8, pylint), good documentation, widely used, proven track record. Getting Started Installation # Pip is recommended to install the latest version pip install gitlint # Alternative: by default, gitlint is installed with pinned dependencies. # To install gitlint with looser dependency requirements, only install gitlint-core. pip install gitlint-core # Community maintained packages: brew install gitlint # Homebrew (macOS) sudo port install gitlint # Macports (macOS) apt-get install gitlint # Ubuntu # Other package managers, see https://repology.org/project/gitlint/versions # Docker: https://hub.docker.com/r/jorisroovers/gitlint docker run --ulimit nofile=1024 -v $(pwd):/repo jorisroovers/gitlint # NOTE: --ulimit is required to work around a limitation in Docker # Details: https://github.com/jorisroovers/gitlint/issues/129 Usage # Check the last commit message gitlint # Alternatively, pipe a commit message to gitlint: cat examples/commit-message-1 | gitlint # or git log -1 --pretty=%B | gitlint # Or read the commit-msg from a file, like so: gitlint --msg-filename examples/commit-message-2 # Lint all commits in your repo gitlint --commits HEAD # To install a gitlint as a commit-msg git hook: gitlint install-hook Output example: $ cat examples/commit-message-2 | gitlint 1: T1 Title exceeds max length (134>80): \"This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping \" 1: T2 Title has trailing whitespace: \"This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping \" 1: T4 Title contains hard tab characters (\\t): \"This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping \" 2: B4 Second line is not empty: \"This line should not contain text\" 3: B1 Line exceeds max length (125>80): \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \" 3: B2 Line has trailing whitespace: \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \" 3: B3 Line contains hard tab characters (\\t): \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \" Note The returned exit code equals the number of errors found. Some exit codes are special . Configuration For in-depth documentation of general and rule-specific configuration options, have a look at the Configuration and Rules pages. Short example .gitlint file ( full reference ): [general] # Ignore certain rules (comma-separated list), you can reference them by # their id or by their full name ignore=body-is-missing,T3 # Ignore any data send to gitlint via stdin ignore-stdin=true # Configure title-max-length rule, set title length to 80 (72 = default) [title-max-length] line-length=80 # You can also reference rules by their id (B1 = body-max-line-length) [B1] line-length=123 Example use of flags: # Change gitlint's verbosity. $ gitlint -v # Ignore certain rules $ gitlint --ignore body-is-missing,T3 # Enable debug mode $ gitlint --debug # Load user-defined rules (see http://jorisroovers.github.io/gitlint/user_defined_rules) $ gitlint --extra-path /home/joe/mygitlint_rules Other commands and variations: $ gitlint --help Usage: gitlint [OPTIONS] COMMAND [ARGS]... Git lint tool, checks your git commit messages for styling issues Documentation: http://jorisroovers.github.io/gitlint Options: --target DIRECTORY Path of the target git repository. [default: current working directory] -C, --config FILE Config file location [default: .gitlint] -c TEXT Config flags in format <rule>.<option>=<value> (e.g.: -c T1.line-length=80). Flag can be used multiple times to set multiple config values. --commit TEXT Hash (SHA) of specific commit to lint. --commits TEXT The range of commits to lint. [default: HEAD] -e, --extra-path PATH Path to a directory or python module with extra user-defined rules --ignore TEXT Ignore rules (comma-separated by id or name). --contrib TEXT Contrib rules to enable (comma-separated by id or name). --msg-filename FILENAME Path to a file containing a commit-msg. --ignore-stdin Ignore any stdin data. Useful for running in CI server. --staged Read staged commit meta-info from the local repository. --fail-without-commits Hard fail when the target commit range is empty. -v, --verbose Verbosity, more v's for more verbose output (e.g.: -v, -vv, -vvv). [default: -vvv] -s, --silent Silent mode (no output). Takes precedence over -v, -vv, -vvv. -d, --debug Enable debugging output. --version Show the version and exit. --help Show this message and exit. Commands: generate-config Generates a sample gitlint config file. install-hook Install gitlint as a git commit-msg hook. lint Lints a git repository [default command] run-hook Runs the gitlint commit-msg hook. uninstall-hook Uninstall gitlint commit-msg hook. When no COMMAND is specified, gitlint defaults to 'gitlint lint'. Using gitlint as a commit-msg hook Introduced in gitlint v0.4.0 You can also install gitlint as a git commit-msg hook so that gitlint checks your commit messages automatically after each commit. gitlint install-hook # To remove the hook gitlint uninstall-hook Important Gitlint cannot work together with an existing hook. If you already have a .git/hooks/commit-msg file in your local repository, gitlint will refuse to install the commit-msg hook. Gitlint will also only uninstall unmodified commit-msg hooks that were installed by gitlint. If you're looking to use gitlint in conjunction with other hooks, you should consider using gitlint with pre-commit . Using gitlint through pre-commit gitlint can be configured as a plugin for the pre-commit git hooks framework. Simply add the configuration to your .pre-commit-config.yaml : - repo: https://github.com/jorisroovers/gitlint rev: # Fill in a tag / sha here hooks: - id: gitlint You then need to install the pre-commit hook like so: pre-commit install --hook-type commit-msg Important It's important that you run pre-commit install --hook-type commit-msg , even if you've already used pre-commit install before. pre-commit install does not install commit-msg hooks by default! To manually trigger gitlint using pre-commit for your last commit message, use the following command: pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_EDITMSG In case you want to change gitlint's behavior, you should either use a .gitlint file (see Configuration ) or modify the gitlint invocation in your .pre-commit-config.yaml file like so: - repo: https://github.com/jorisroovers/gitlint rev: # Fill in a tag / sha here hooks: - id: gitlint args: [--contrib=CT1, --msg-filename] Important You need to add --msg-filename at the end of your custom args list as the gitlint-hook will fail otherwise. Using gitlint in a CI environment By default, when just running gitlint without additional parameters, gitlint lints the last commit in the current working directory. This makes it easy to use gitlint in a CI environment (Jenkins, TravisCI, Github Actions, pre-commit, CircleCI, Gitlab, etc). In fact, this is exactly what we do ourselves: on every commit, we run gitlint as part of our CI checks . This will cause the build to fail when we submit a bad commit message. Alternatively, gitlint will also lint any commit message that you feed it via stdin like so: # lint the last commit message git log -1 --pretty=%B | gitlint # lint a specific commit: 62c0519 git log -1 --pretty=%B 62c0519 | gitlint Note that gitlint requires that you specify --pretty=%B (=only print the log message, not the metadata), future versions of gitlint might fix this and not require the --pretty argument. Linting specific commits Gitlint allows users to lint a specific commit: gitlint --commit 019cf40580a471a3958d3c346aa8bfd265fe5e16 gitlint --commit 019cf40 # short SHAs work too You can also lint multiple commits at once like so: # Lint a specific commit range: gitlint --commits \"019cf40...d6bc75a\" # You can also use git's special references: gitlint --commits \"origin..HEAD\" The --commits flag takes a single refspec argument or commit range. Basically, any range that is understood by git rev-list as a single argument will work. For cases where the --commits option doesn't provide the flexibility you need, you can always use a simple shell script to lint an arbitrary set of commits, like shown in the example below. #!/bin/sh for commit in $(git rev-list master); do echo \"Commit $commit\" gitlint --commit $commit echo \"--------\" done Note One downside to this approach is that you invoke gitlint once per commit vs. once per set of commits. This means you'll incur the gitlint startup time once per commit, making this approach rather slow if you want to lint a large set of commits. Always use --commits if you can to avoid this performance penalty. Merge, fixup, squash and revert commits Introduced in gitlint v0.7.0 (merge), v0.9.0 (fixup, squash) and v0.13.0 (revert) Gitlint ignores merge, revert, fixup and squash commits by default. For merge and revert commits, the rationale for ignoring them is that most users keep git's default messages for these commits (i.e Merge/Revert \"[original commit message]\" ). Often times these commit messages are also auto-generated through tools like github. These default/auto-generated commit messages tend to cause gitlint violations. For example, a common case is that \"Merge:\" being auto-prepended triggers a title-max-length violation. Most users don't want this, so we disable linting on Merge and Revert commits by default. For squash and fixup commits, the rationale is that these are temporary commits that will be squashed into a different commit, and hence the commit messages for these commits are very short-lived and not intended to make it into the final commit history. In addition, by prepending \"fixup!\" or \"squash!\" to your commit message, certain gitlint rules might be violated (e.g. title-max-length ) which is often undesirable. In case you do want to lint these commit messages, you can disable this behavior by setting the general ignore-merge-commits , ignore-revert-commits , ignore-fixup-commits or ignore-squash-commits option to false using one of the various ways to configure gitlint . Ignoring commits You can configure gitlint to ignore specific commits or parts of a commit. One way to do this, is by adding a gitlint-ignore line to your commit message . If you have a case where you want to ignore a certain type of commits all-together, you can use gitlint's ignore rules. Here's a few examples snippets from a .gitlint file: [ignore-by-title] # Match commit titles starting with Release regex=^Release(.*) ignore=title-max-length,body-min-length # ignore all rules by setting ignore to 'all' # ignore=all [ignore-by-body] # Match commits message bodies that have a line that contains 'release' regex=(.*)release(.*) ignore=all [ignore-by-author-name] # Match commits by author name (e.g. ignore all rules when a commit is made by dependabot) regex=dependabot ignore=all If you just want to ignore certain lines in a commit, you can do that using the ignore-body-lines rule. # Ignore all lines that start with 'Co-Authored-By' [ignore-body-lines] regex=^Co-Authored-By Warning When ignoring specific lines, gitlint will no longer be aware of them while applying other rules. This can sometimes be confusing for end-users, especially as line numbers of violations will typically no longer match line numbers in the original commit message. Make sure to educate your users accordingly. Note If you want to implement more complex ignore rules according to your own logic, you can do so using user-defined configuration rules . Named Rules Introduced in gitlint v0.14.0 Named rules allow you to have multiple of the same rules active at the same time, which allows you to enforce the same rule multiple times but with different options. Named rules are so-called because they require an additional unique identifier (i.e. the rule name ) during configuration. Warning Named rules is an advanced topic. It's easy to make mistakes by defining conflicting instances of the same rule. For example, by defining 2 body-max-line-length rules with different line-length options, you obviously create a conflicting situation. Gitlint does not do any resolution of such conflicts, it's up to you to make sure any configuration is non-conflicting. So caution advised! Defining a named rule is easy, for example using your .gitlint file: # By adding the following section, you will add a second instance of the # title-must-not-contain-word (T5) rule (in addition to the one that is enabled # by default) with the name 'extra-words'. [title-must-not-contain-word:extra-words] words=foo,bar # So the generic form is # [<rule-id-or-name>:<your-chosen-name>] # Another example, referencing the rule type by id [T5:more-words] words=hur,dur # You can add as many additional rules and you can name them whatever you want # The only requirement is that names cannot contain whitespace or colons (:) [title-must-not-contain-word:This-Can_Be*Whatever$YouWant] words=wonderwoman,batman,power ranger When executing gitlint, you will see the violations from the default title-must-not-contain-word (T5) rule, as well as the violations caused by the additional Named Rules. $ gitlint 1: T5 Title contains the word 'WIP' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:This-Can_Be*Whatever$YouWant Title contains the word 'wonderwoman' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:extra-words Title contains the word 'foo' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:extra-words Title contains the word 'bar' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:more-words Title contains the word 'hur' (case-insensitive): \"WIP: foo wonderwoman hur bar\" Named rules are further treated identical to all other rules in gitlint: You can reference them by their full name, when e.g. adding them to your ignore configuration # .gitlint file example [general] ignore=T5:more-words,title-must-not-contain-word:extra-words You can use them to instantiate multiple of the same user-defined rule You can configure them using any of the ways you can configure regular gitlint rules Exit codes Gitlint uses the exit code as a simple way to indicate the number of violations found. Some exit codes are used to indicate special errors as indicated in the table below. Because of these special error codes and the fact that bash only supports exit codes between 0 and 255 , the maximum number of violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations it can detect, it will just always return with exit code 252 when the number of violations is greater than or equal to 252. Exit Code Description 253 Wrong invocation of the gitlint command. 254 Something went wrong when invoking git. 255 Invalid gitlint configuration",
		"title": "Home"
	}, {
		"location": "#introduction",
		"text": "Gitlint is a git commit message linter written in python: it checks your commit messages for style. Great for use as a commit-msg git hook or as part of your gating script in a CI pipeline (e.g. Jenkins) . Note Gitlint support for Windows is experimental , and there are some known issues . Also, gitlint is not the only git commit message linter out there, if you are looking for an alternative written in a different language, have a look at fit-commit (Ruby), node-commit-msg (Node.js) or commitlint (Node.js). Important Gitlint no longer supports Python 2.7 and Python 3.5 as they have reached End-Of-Life . The last gitlint version to support Python 2.7 and Python 3.5 is 0.14.0 (released on October 24th, 2020).",
		"title": "Introduction"
	}, {
		"location": "#features",
		"text": "Commit message hook : Auto-trigger validations against new commit message right when you're committing . Also works with pre-commit . Easily integrated : Gitlint is designed to work with your own scripts or CI system . Sane defaults: Many of gitlint's validations are based on well-known , community , standards , others are based on checks that we've found useful throughout the years. Easily configurable: Gitlint has sane defaults, but you can also easily customize it to your own liking . Community contributed rules : Conventions that are common but not universal can be selectively enabled . User-defined rules: Want to do more then what gitlint offers out of the box? Write your own user defined rules . Full unicode support: Lint your Russian, Chinese or Emoji commit messages with ease! Production-ready: Gitlint checks a lot of the boxes you're looking for: actively maintained, high unit test coverage, integration tests, python code standards (pep8, pylint), good documentation, widely used, proven track record.",
		"title": "Features"
	}, {
		"location": "#getting-started",
		"text": "",
		"title": "Getting Started"
	}, {
		"location": "#installation",
		"text": "# Pip is recommended to install the latest version pip install gitlint # Alternative: by default, gitlint is installed with pinned dependencies. # To install gitlint with looser dependency requirements, only install gitlint-core. pip install gitlint-core # Community maintained packages: brew install gitlint # Homebrew (macOS) sudo port install gitlint # Macports (macOS) apt-get install gitlint # Ubuntu # Other package managers, see https://repology.org/project/gitlint/versions # Docker: https://hub.docker.com/r/jorisroovers/gitlint docker run --ulimit nofile=1024 -v $(pwd):/repo jorisroovers/gitlint # NOTE: --ulimit is required to work around a limitation in Docker # Details: https://github.com/jorisroovers/gitlint/issues/129",
		"title": "Installation"
	}, {
		"location": "#usage",
		"text": "# Check the last commit message gitlint # Alternatively, pipe a commit message to gitlint: cat examples/commit-message-1 | gitlint # or git log -1 --pretty=%B | gitlint # Or read the commit-msg from a file, like so: gitlint --msg-filename examples/commit-message-2 # Lint all commits in your repo gitlint --commits HEAD # To install a gitlint as a commit-msg git hook: gitlint install-hook Output example: $ cat examples/commit-message-2 | gitlint 1: T1 Title exceeds max length (134>80): \"This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping \" 1: T2 Title has trailing whitespace: \"This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping \" 1: T4 Title contains hard tab characters (\\t): \"This is the title of a commit message that is over 80 characters and contains hard tabs and trailing whitespace and the word wiping \" 2: B4 Second line is not empty: \"This line should not contain text\" 3: B1 Line exceeds max length (125>80): \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \" 3: B2 Line has trailing whitespace: \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \" 3: B3 Line contains hard tab characters (\\t): \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120. \" Note The returned exit code equals the number of errors found. Some exit codes are special .",
		"title": "Usage"
	}, {
		"location": "#configuration",
		"text": "For in-depth documentation of general and rule-specific configuration options, have a look at the Configuration and Rules pages. Short example .gitlint file ( full reference ): [general] # Ignore certain rules (comma-separated list), you can reference them by # their id or by their full name ignore=body-is-missing,T3 # Ignore any data send to gitlint via stdin ignore-stdin=true # Configure title-max-length rule, set title length to 80 (72 = default) [title-max-length] line-length=80 # You can also reference rules by their id (B1 = body-max-line-length) [B1] line-length=123 Example use of flags: # Change gitlint's verbosity. $ gitlint -v # Ignore certain rules $ gitlint --ignore body-is-missing,T3 # Enable debug mode $ gitlint --debug # Load user-defined rules (see http://jorisroovers.github.io/gitlint/user_defined_rules) $ gitlint --extra-path /home/joe/mygitlint_rules Other commands and variations: $ gitlint --help Usage: gitlint [OPTIONS] COMMAND [ARGS]... Git lint tool, checks your git commit messages for styling issues Documentation: http://jorisroovers.github.io/gitlint Options: --target DIRECTORY Path of the target git repository. [default: current working directory] -C, --config FILE Config file location [default: .gitlint] -c TEXT Config flags in format <rule>.<option>=<value> (e.g.: -c T1.line-length=80). Flag can be used multiple times to set multiple config values. --commit TEXT Hash (SHA) of specific commit to lint. --commits TEXT The range of commits to lint. [default: HEAD] -e, --extra-path PATH Path to a directory or python module with extra user-defined rules --ignore TEXT Ignore rules (comma-separated by id or name). --contrib TEXT Contrib rules to enable (comma-separated by id or name). --msg-filename FILENAME Path to a file containing a commit-msg. --ignore-stdin Ignore any stdin data. Useful for running in CI server. --staged Read staged commit meta-info from the local repository. --fail-without-commits Hard fail when the target commit range is empty. -v, --verbose Verbosity, more v's for more verbose output (e.g.: -v, -vv, -vvv). [default: -vvv] -s, --silent Silent mode (no output). Takes precedence over -v, -vv, -vvv. -d, --debug Enable debugging output. --version Show the version and exit. --help Show this message and exit. Commands: generate-config Generates a sample gitlint config file. install-hook Install gitlint as a git commit-msg hook. lint Lints a git repository [default command] run-hook Runs the gitlint commit-msg hook. uninstall-hook Uninstall gitlint commit-msg hook. When no COMMAND is specified, gitlint defaults to 'gitlint lint'.",
		"title": "Configuration"
	}, {
		"location": "#using-gitlint-as-a-commit-msg-hook",
		"text": "Introduced in gitlint v0.4.0 You can also install gitlint as a git commit-msg hook so that gitlint checks your commit messages automatically after each commit. gitlint install-hook # To remove the hook gitlint uninstall-hook Important Gitlint cannot work together with an existing hook. If you already have a .git/hooks/commit-msg file in your local repository, gitlint will refuse to install the commit-msg hook. Gitlint will also only uninstall unmodified commit-msg hooks that were installed by gitlint. If you're looking to use gitlint in conjunction with other hooks, you should consider using gitlint with pre-commit .",
		"title": "Using gitlint as a commit-msg hook"
	}, {
		"location": "#using-gitlint-through-pre-commit",
		"text": "gitlint can be configured as a plugin for the pre-commit git hooks framework. Simply add the configuration to your .pre-commit-config.yaml : - repo: https://github.com/jorisroovers/gitlint rev: # Fill in a tag / sha here hooks: - id: gitlint You then need to install the pre-commit hook like so: pre-commit install --hook-type commit-msg Important It's important that you run pre-commit install --hook-type commit-msg , even if you've already used pre-commit install before. pre-commit install does not install commit-msg hooks by default! To manually trigger gitlint using pre-commit for your last commit message, use the following command: pre-commit run gitlint --hook-stage commit-msg --commit-msg-filename .git/COMMIT_EDITMSG In case you want to change gitlint's behavior, you should either use a .gitlint file (see Configuration ) or modify the gitlint invocation in your .pre-commit-config.yaml file like so: - repo: https://github.com/jorisroovers/gitlint rev: # Fill in a tag / sha here hooks: - id: gitlint args: [--contrib=CT1, --msg-filename] Important You need to add --msg-filename at the end of your custom args list as the gitlint-hook will fail otherwise.",
		"title": "Using gitlint through pre-commit"
	}, {
		"location": "#using-gitlint-in-a-ci-environment",
		"text": "By default, when just running gitlint without additional parameters, gitlint lints the last commit in the current working directory. This makes it easy to use gitlint in a CI environment (Jenkins, TravisCI, Github Actions, pre-commit, CircleCI, Gitlab, etc). In fact, this is exactly what we do ourselves: on every commit, we run gitlint as part of our CI checks . This will cause the build to fail when we submit a bad commit message. Alternatively, gitlint will also lint any commit message that you feed it via stdin like so: # lint the last commit message git log -1 --pretty=%B | gitlint # lint a specific commit: 62c0519 git log -1 --pretty=%B 62c0519 | gitlint Note that gitlint requires that you specify --pretty=%B (=only print the log message, not the metadata), future versions of gitlint might fix this and not require the --pretty argument.",
		"title": "Using gitlint in a CI environment"
	}, {
		"location": "#linting-specific-commits",
		"text": "Gitlint allows users to lint a specific commit: gitlint --commit 019cf40580a471a3958d3c346aa8bfd265fe5e16 gitlint --commit 019cf40 # short SHAs work too You can also lint multiple commits at once like so: # Lint a specific commit range: gitlint --commits \"019cf40...d6bc75a\" # You can also use git's special references: gitlint --commits \"origin..HEAD\" The --commits flag takes a single refspec argument or commit range. Basically, any range that is understood by git rev-list as a single argument will work. For cases where the --commits option doesn't provide the flexibility you need, you can always use a simple shell script to lint an arbitrary set of commits, like shown in the example below. #!/bin/sh for commit in $(git rev-list master); do echo \"Commit $commit\" gitlint --commit $commit echo \"--------\" done Note One downside to this approach is that you invoke gitlint once per commit vs. once per set of commits. This means you'll incur the gitlint startup time once per commit, making this approach rather slow if you want to lint a large set of commits. Always use --commits if you can to avoid this performance penalty.",
		"title": "Linting specific commits"
	}, {
		"location": "#merge-fixup-squash-and-revert-commits",
		"text": "Introduced in gitlint v0.7.0 (merge), v0.9.0 (fixup, squash) and v0.13.0 (revert) Gitlint ignores merge, revert, fixup and squash commits by default. For merge and revert commits, the rationale for ignoring them is that most users keep git's default messages for these commits (i.e Merge/Revert \"[original commit message]\" ). Often times these commit messages are also auto-generated through tools like github. These default/auto-generated commit messages tend to cause gitlint violations. For example, a common case is that \"Merge:\" being auto-prepended triggers a title-max-length violation. Most users don't want this, so we disable linting on Merge and Revert commits by default. For squash and fixup commits, the rationale is that these are temporary commits that will be squashed into a different commit, and hence the commit messages for these commits are very short-lived and not intended to make it into the final commit history. In addition, by prepending \"fixup!\" or \"squash!\" to your commit message, certain gitlint rules might be violated (e.g. title-max-length ) which is often undesirable. In case you do want to lint these commit messages, you can disable this behavior by setting the general ignore-merge-commits , ignore-revert-commits , ignore-fixup-commits or ignore-squash-commits option to false using one of the various ways to configure gitlint .",
		"title": "Merge, fixup, squash and revert commits"
	}, {
		"location": "#ignoring-commits",
		"text": "You can configure gitlint to ignore specific commits or parts of a commit. One way to do this, is by adding a gitlint-ignore line to your commit message . If you have a case where you want to ignore a certain type of commits all-together, you can use gitlint's ignore rules. Here's a few examples snippets from a .gitlint file: [ignore-by-title] # Match commit titles starting with Release regex=^Release(.*) ignore=title-max-length,body-min-length # ignore all rules by setting ignore to 'all' # ignore=all [ignore-by-body] # Match commits message bodies that have a line that contains 'release' regex=(.*)release(.*) ignore=all [ignore-by-author-name] # Match commits by author name (e.g. ignore all rules when a commit is made by dependabot) regex=dependabot ignore=all If you just want to ignore certain lines in a commit, you can do that using the ignore-body-lines rule. # Ignore all lines that start with 'Co-Authored-By' [ignore-body-lines] regex=^Co-Authored-By Warning When ignoring specific lines, gitlint will no longer be aware of them while applying other rules. This can sometimes be confusing for end-users, especially as line numbers of violations will typically no longer match line numbers in the original commit message. Make sure to educate your users accordingly. Note If you want to implement more complex ignore rules according to your own logic, you can do so using user-defined configuration rules .",
		"title": "Ignoring commits"
	}, {
		"location": "#named-rules",
		"text": "Introduced in gitlint v0.14.0 Named rules allow you to have multiple of the same rules active at the same time, which allows you to enforce the same rule multiple times but with different options. Named rules are so-called because they require an additional unique identifier (i.e. the rule name ) during configuration. Warning Named rules is an advanced topic. It's easy to make mistakes by defining conflicting instances of the same rule. For example, by defining 2 body-max-line-length rules with different line-length options, you obviously create a conflicting situation. Gitlint does not do any resolution of such conflicts, it's up to you to make sure any configuration is non-conflicting. So caution advised! Defining a named rule is easy, for example using your .gitlint file: # By adding the following section, you will add a second instance of the # title-must-not-contain-word (T5) rule (in addition to the one that is enabled # by default) with the name 'extra-words'. [title-must-not-contain-word:extra-words] words=foo,bar # So the generic form is # [<rule-id-or-name>:<your-chosen-name>] # Another example, referencing the rule type by id [T5:more-words] words=hur,dur # You can add as many additional rules and you can name them whatever you want # The only requirement is that names cannot contain whitespace or colons (:) [title-must-not-contain-word:This-Can_Be*Whatever$YouWant] words=wonderwoman,batman,power ranger When executing gitlint, you will see the violations from the default title-must-not-contain-word (T5) rule, as well as the violations caused by the additional Named Rules. $ gitlint 1: T5 Title contains the word 'WIP' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:This-Can_Be*Whatever$YouWant Title contains the word 'wonderwoman' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:extra-words Title contains the word 'foo' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:extra-words Title contains the word 'bar' (case-insensitive): \"WIP: foo wonderwoman hur bar\" 1: T5:more-words Title contains the word 'hur' (case-insensitive): \"WIP: foo wonderwoman hur bar\" Named rules are further treated identical to all other rules in gitlint: You can reference them by their full name, when e.g. adding them to your ignore configuration # .gitlint file example [general] ignore=T5:more-words,title-must-not-contain-word:extra-words You can use them to instantiate multiple of the same user-defined rule You can configure them using any of the ways you can configure regular gitlint rules",
		"title": "Named Rules"
	}, {
		"location": "#exit-codes",
		"text": "Gitlint uses the exit code as a simple way to indicate the number of violations found. Some exit codes are used to indicate special errors as indicated in the table below. Because of these special error codes and the fact that bash only supports exit codes between 0 and 255 , the maximum number of violations counted by the exit code is 252. Note that gitlint does not have a limit on the number of violations it can detect, it will just always return with exit code 252 when the number of violations is greater than or equal to 252. Exit Code Description 253 Wrong invocation of the gitlint command. 254 Something went wrong when invoking git. 255 Invalid gitlint configuration",
		"title": "Exit codes"
	}, {
		"location": "configuration/",
		"text": "Configuration Gitlint can be configured through different means. The .gitlint file You can modify gitlint's behavior by adding a .gitlint file to your git repository. Generate a default .gitlint config file by running: gitlint generate-config You can also use a different config file like so: gitlint --config myconfigfile.ini The block below shows a sample .gitlint file. Details about rule config options can be found on the Rules page, details about the [general] section can be found in the General Configuration section of this page. # Edit this file as you like. # # All these sections are optional. Each section with the exception of [general] represents # one rule and each key in it is an option for that specific rule. # # Rules and sections can be referenced by their full name or by id. For example # section \"[body-max-line-length]\" could also be written as \"[B1]\". Full section names are # used in here for clarity. # Rule reference documentation: http://jorisroovers.github.io/gitlint/rules/ # # Use 'gitlint generate-config' to generate a config file with all possible options [general] # Ignore certain rules (comma-separated list), you can reference them by their # id or by their full name ignore=title-trailing-punctuation, T3 # verbosity should be a value between 1 and 3, the commandline -v flags take # precedence over this verbosity = 2 # By default gitlint will ignore merge, revert, fixup and squash commits. ignore-merge-commits=true ignore-revert-commits=true ignore-fixup-commits=true ignore-squash-commits=true # Ignore any data send to gitlint via stdin ignore-stdin=true # Fetch additional meta-data from the local repository when manually passing a # commit message to gitlint via stdin or --commit-msg. Disabled by default. staged=true # Hard fail when the target commit range is empty. Note that gitlint will # already fail by default on invalid commit ranges. This option is specifically # to tell gitlint to fail on *valid but empty* commit ranges. # Disabled by default. fail-without-commits=true # Enable debug mode (prints more output). Disabled by default. debug=true # Enable community contributed rules # See http://jorisroovers.github.io/gitlint/contrib_rules for details contrib=contrib-title-conventional-commits,CC1 # Set the extra-path where gitlint will search for user defined rules # See http://jorisroovers.github.io/gitlint/user_defined_rules for details extra-path=examples/ # This is an example of how to configure the \"title-max-length\" rule and # set the line-length it enforces to 80 [title-max-length] line-length=80 # Conversely, you can also enforce minimal length of a title with the # \"title-min-length\" rule: [title-min-length] min-length=5 [title-must-not-contain-word] # Comma-separated list of words that should not occur in the title. Matching is case # insensitive. It's fine if the keyword occurs as part of a larger word (so \"WIPING\" # will not cause a violation, but \"WIP: my title\" will. words=wip [title-match-regex] # python like regex (https://docs.python.org/3/library/re.html) that the # commit-msg title must be matched to. # Note that the regex can contradict with other rules if not used correctly # (e.g. title-must-not-contain-word). regex=^US[0-9]* [body-max-line-length] line-length=120 [body-min-length] min-length=5 [body-is-missing] # Whether to ignore this rule on merge commits (which typically only have a title) # default = True ignore-merge-commits=false [body-changed-file-mention] # List of files that need to be explicitly mentioned in the body when they are changed # This is useful for when developers often erroneously edit certain files or git submodules. # By specifying this rule, developers can only change the file when they explicitly # reference it in the commit message. files=gitlint-core/gitlint/rules.py,README.md [body-match-regex] # python-style regex that the commit-msg body must match. # E.g. body must end in My-Commit-Tag: foo regex=My-Commit-Tag: foo$ [author-valid-email] # python like regex (https://docs.python.org/3/library/re.html) that the # commit author email address should be matched to # E.g.: For example, use the following regex if you only want to allow email # addresses from foo.com regex=[^@]+@foo.com [ignore-by-title] # Ignore certain rules for commits of which the title matches a regex # E.g. Match commit titles that start with \"Release\" regex=^Release(.*) # Ignore certain rules, you can reference them by their id or by their full name # Use 'all' to ignore all rules ignore=T1,body-min-length [ignore-by-body] # Ignore certain rules for commits of which the body has a line that matches a regex # E.g. Match bodies that have a line that that contain \"release\" regex=(.*)release(.*) # # Ignore certain rules, you can reference them by their id or by their full name # Use 'all' to ignore all rules ignore=T1,body-min-length [ignore-body-lines] # Ignore certain lines in a commit body that match a regex. # E.g. Ignore all lines that start with 'Co-Authored-By' regex=^Co-Authored-By [ignore-by-author-name] # Ignore certain rules for commits of which the author name matches a regex # E.g. Match commits made by dependabot regex=(.*)dependabot(.*) # Ignore certain rules, you can reference them by their id or by their full name # Use 'all' to ignore all rules ignore=T1,body-min-length # This is a contrib rule - a community contributed rule. These are disabled by default. # You need to explicitly enable them one-by-one by adding them to the \"contrib\" option # under [general] section above. [contrib-title-conventional-commits] # Specify allowed commit types. For details see: https://www.conventionalcommits.org/ types = bugfix,user-story,epic Commandline config You can also use one or more -c flags like so: $ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100 The generic config flag format is -c <rule>.<option>=<value> and supports all the same rules and options which you can also use in a .gitlint config file. Commit specific config You can also configure gitlint by adding specific lines to your commit message. For now, we only support ignoring commits by adding gitlint-ignore: all to the commit message like so: WIP: This is my commit message I want gitlint to ignore this entire commit message. gitlint-ignore: all gitlint-ignore: all can occur on any line, as long as it is at the start of the line. You can also specify specific rules to be ignored as follows: WIP: This is my commit message I want gitlint to ignore this entire commit message. gitlint-ignore: T1, body-hard-tab Configuration precedence gitlint configuration is applied in the following order of precedence: Commit specific config (e.g.: gitlint-ignore: all in the commit message) Configuration Rules (e.g.: ignore-by-title ) Commandline convenience flags (e.g.: -vv , --silent , --ignore ) Environment variables (e.g.: GITLINT_VERBOSITY=3 ) Commandline configuration flags (e.g.: -c title-max-length=123 ) Configuration file (local .gitlint file, or file specified using -C / --config ) Default gitlint config General Options Below we outline all configuration options that modify gitlint's overall behavior. These options can be specified using commandline flags or in [general] section in a .gitlint configuration file. silent Enable silent mode (no output). Use exit code to determine result. Default value gitlint version commandline flag environment variable False >= 0.1.0 --silent GITLINT_SILENT Examples # CLI gitlint --silent GITLINT_SILENT=1 gitlint # using env variable verbosity Amount of output gitlint will show when printing errors. Default value gitlint version commandline flag environment variable 3 >= 0.1.0 -v GITLINT_VERBOSITY Examples # CLI gitlint -vvv # default (level 3) gitlint -vv # less output (level 2) gitlint -v # even less (level 1) gitlint --silent # no output (level 0) gitlint -c general.verbosity=1 # Set specific level gitlint -c general.verbosity=0 # Same as --silent GITLINT_VERBOSITY=2 gitlint # using env variable # .gitlint [general] verbosity=2 ignore Comma separated list of rules to ignore (by name or id). Default value gitlint version commandline flag environment variable [] (=empty list) >= 0.1.0 --ignore GITLINT_IGNORE Examples # CLI gitlint --ignore=body-min-length # ignore single rule gitlint --ignore=T1,body-min-length # ignore multiple rule gitlint -c general.ignore=T1,body-min-length # different way of doing the same GITLINT_IGNORE=T1,body-min-length gitlint # using env variable #.gitlint [general] ignore=T1,body-min-length debug Enable debugging output. Default value gitlint version commandline flag environment variable false >= 0.7.1 --debug GITLINT_DEBUG Examples # CLI gitlint --debug GITLINT_DEBUG=1 gitlint # using env variable # --debug is special, the following does NOT work # gitlint -c general.debug=true target Target git repository gitlint should be linting against. Default value gitlint version commandline flag environment variable (empty) >= 0.8.0 --target GITLINT_TARGET Examples # CLI gitlint --target=/home/joe/myrepo/ gitlint -c general.target=/home/joe/myrepo/ # different way of doing the same GITLINT_TARGET=/home/joe/myrepo/ gitlint # using env variable #.gitlint [general] target=/home/joe/myrepo/ extra-path Path where gitlint looks for user-defined rules . Default value gitlint version commandline flag environment variable (empty) >= 0.8.0 --extra-path GITLINT_EXTRA_PATH Examples # CLI gitlint --extra-path=/home/joe/rules/ gitlint -c general.extra-path=/home/joe/rules/ # different way of doing the same GITLINT_EXTRA_PATH=/home/joe/rules/ gitlint # using env variable #.gitlint [general] extra-path=/home/joe/rules/ contrib Comma-separated list of Contrib rules to enable (by name or id). Default value gitlint version commandline flag environment variable (empty) >= 0.12.0 --contrib GITLINT_CONTRIB Examples # CLI gitlint --contrib=contrib-title-conventional-commits,CC1 # different way of doing the same gitlint -c general.contrib=contrib-title-conventional-commits,CC1 # using env variable GITLINT_CONTRIB=contrib-title-conventional-commits,CC1 gitlint #.gitlint [general] contrib=contrib-title-conventional-commits,CC1 staged Fetch additional meta-data from the local repository when manually passing a commit message to gitlint via stdin or --commit-msg . Default value gitlint version commandline flag environment variable false >= 0.13.0 --staged GITLINT_STAGED Examples # CLI gitlint --staged gitlint -c general.staged=true # different way of doing the same GITLINT_STAGED=1 gitlint # using env variable #.gitlint [general] staged=true fail-without-commits Hard fail when the target commit range is empty. Note that gitlint will already fail by default on invalid commit ranges. This option is specifically to tell gitlint to fail on valid but empty commit ranges. Default value gitlint version commandline flag environment variable false >= 0.15.2 --fail-without-commits GITLINT_FAIL_WITHOUT_COMMITS Examples # CLI # The following will cause gitlint to hard fail (i.e. exit code > 0) # since HEAD..HEAD is a valid but empty commit range. gitlint --fail-without-commits --commits HEAD..HEAD GITLINT_FAIL_WITHOUT_COMMITS=1 gitlint # using env variable #.gitlint [general] fail-without-commits=true ignore-stdin Ignore any stdin data. Sometimes useful when running gitlint in a CI server. Default value gitlint version commandline flag environment variable false >= 0.12.0 --ignore-stdin GITLINT_IGNORE_STDIN Examples # CLI gitlint --ignore-stdin gitlint -c general.ignore-stdin=true # different way of doing the same GITLINT_IGNORE_STDIN=1 gitlint # using env variable #.gitlint [general] ignore-stdin=true ignore-merge-commits Whether or not to ignore merge commits. Default value gitlint version commandline flag environment variable true >= 0.7.0 Not Available Not Available Examples # CLI gitlint -c general.ignore-merge-commits=false #.gitlint [general] ignore-merge-commits=false ignore-revert-commits Whether or not to ignore revert commits. Default value gitlint version commandline flag environment variable true >= 0.13.0 Not Available Not Available Examples # CLI gitlint -c general.ignore-revert-commits=false #.gitlint [general] ignore-revert-commits=false ignore-fixup-commits Whether or not to ignore fixup commits. Default value gitlint version commandline flag environment variable true >= 0.9.0 Not Available Not Available Examples # CLI gitlint -c general.ignore-fixup-commits=false #.gitlint [general] ignore-fixup-commits=false ignore-squash-commits Whether or not to ignore squash commits. Default value gitlint version commandline flag environment variable true >= 0.9.0 Not Available Not Available Examples # CLI gitlint -c general.ignore-squash-commits=false #.gitlint [general] ignore-squash-commits=false",
		"title": "Configuration"
	}, {
		"location": "configuration/#configuration",
		"text": "Gitlint can be configured through different means.",
		"title": "Configuration"
	}, {
		"location": "configuration/#jira-integration-action",
		"text": "Everything started",
		"title": "Jira Server Integration GitHub Action: From Thrill to Chill"
	}, {
		"location": "configuration/#commandline-config",
		"text": "You can also use one or more -c flags like so: $ gitlint -c general.verbosity=2 -c title-max-length.line-length=80 -c B1.line-length=100 The generic config flag format is -c <rule>.<option>=<value> and supports all the same rules and options which you can also use in a .gitlint config file.",
		"title": "Commandline config"
	}, {
		"location": "configuration/#commit-specific-config",
		"text": "You can also configure gitlint by adding specific lines to your commit message. For now, we only support ignoring commits by adding gitlint-ignore: all to the commit message like so: WIP: This is my commit message I want gitlint to ignore this entire commit message. gitlint-ignore: all gitlint-ignore: all can occur on any line, as long as it is at the start of the line. You can also specify specific rules to be ignored as follows: WIP: This is my commit message I want gitlint to ignore this entire commit message. gitlint-ignore: T1, body-hard-tab",
		"title": "Commit specific config"
	}, {
		"location": "configuration/#configuration-precedence",
		"text": "gitlint configuration is applied in the following order of precedence: Commit specific config (e.g.: gitlint-ignore: all in the commit message) Configuration Rules (e.g.: ignore-by-title ) Commandline convenience flags (e.g.: -vv , --silent , --ignore ) Environment variables (e.g.: GITLINT_VERBOSITY=3 ) Commandline configuration flags (e.g.: -c title-max-length=123 ) Configuration file (local .gitlint file, or file specified using -C / --config ) Default gitlint config",
		"title": "Configuration precedence"
	}, {
		"location": "configuration/#general-options",
		"text": "Below we outline all configuration options that modify gitlint's overall behavior. These options can be specified using commandline flags or in [general] section in a .gitlint configuration file.",
		"title": "General Options"
	}, {
		"location": "configuration/#silent",
		"text": "Enable silent mode (no output). Use exit code to determine result. Default value gitlint version commandline flag environment variable False >= 0.1.0 --silent GITLINT_SILENT",
		"title": "silent"
	}, {
		"location": "configuration/#examples",
		"text": "# CLI gitlint --silent GITLINT_SILENT=1 gitlint # using env variable",
		"title": "Examples"
	}, {
		"location": "configuration/#verbosity",
		"text": "Amount of output gitlint will show when printing errors. Default value gitlint version commandline flag environment variable 3 >= 0.1.0 -v GITLINT_VERBOSITY",
		"title": "verbosity"
	}, {
		"location": "configuration/#examples_1",
		"text": "# CLI gitlint -vvv # default (level 3) gitlint -vv # less output (level 2) gitlint -v # even less (level 1) gitlint --silent # no output (level 0) gitlint -c general.verbosity=1 # Set specific level gitlint -c general.verbosity=0 # Same as --silent GITLINT_VERBOSITY=2 gitlint # using env variable # .gitlint [general] verbosity=2",
		"title": "Examples"
	}, {
		"location": "configuration/#ignore",
		"text": "Comma separated list of rules to ignore (by name or id). Default value gitlint version commandline flag environment variable [] (=empty list) >= 0.1.0 --ignore GITLINT_IGNORE",
		"title": "ignore"
	}, {
		"location": "configuration/#examples_2",
		"text": "# CLI gitlint --ignore=body-min-length # ignore single rule gitlint --ignore=T1,body-min-length # ignore multiple rule gitlint -c general.ignore=T1,body-min-length # different way of doing the same GITLINT_IGNORE=T1,body-min-length gitlint # using env variable #.gitlint [general] ignore=T1,body-min-length",
		"title": "Examples"
	}, {
		"location": "configuration/#debug",
		"text": "Enable debugging output. Default value gitlint version commandline flag environment variable false >= 0.7.1 --debug GITLINT_DEBUG",
		"title": "debug"
	}, {
		"location": "configuration/#examples_3",
		"text": "# CLI gitlint --debug GITLINT_DEBUG=1 gitlint # using env variable # --debug is special, the following does NOT work # gitlint -c general.debug=true",
		"title": "Examples"
	}, {
		"location": "configuration/#target",
		"text": "Target git repository gitlint should be linting against. Default value gitlint version commandline flag environment variable (empty) >= 0.8.0 --target GITLINT_TARGET",
		"title": "target"
	}, {
		"location": "configuration/#examples_4",
		"text": "# CLI gitlint --target=/home/joe/myrepo/ gitlint -c general.target=/home/joe/myrepo/ # different way of doing the same GITLINT_TARGET=/home/joe/myrepo/ gitlint # using env variable #.gitlint [general] target=/home/joe/myrepo/",
		"title": "Examples"
	}, {
		"location": "configuration/#extra-path",
		"text": "Path where gitlint looks for user-defined rules . Default value gitlint version commandline flag environment variable (empty) >= 0.8.0 --extra-path GITLINT_EXTRA_PATH",
		"title": "extra-path"
	}, {
		"location": "configuration/#examples_5",
		"text": "# CLI gitlint --extra-path=/home/joe/rules/ gitlint -c general.extra-path=/home/joe/rules/ # different way of doing the same GITLINT_EXTRA_PATH=/home/joe/rules/ gitlint # using env variable #.gitlint [general] extra-path=/home/joe/rules/",
		"title": "Examples"
	}, {
		"location": "configuration/#contrib",
		"text": "Comma-separated list of Contrib rules to enable (by name or id). Default value gitlint version commandline flag environment variable (empty) >= 0.12.0 --contrib GITLINT_CONTRIB",
		"title": "contrib"
	}, {
		"location": "configuration/#examples_6",
		"text": "# CLI gitlint --contrib=contrib-title-conventional-commits,CC1 # different way of doing the same gitlint -c general.contrib=contrib-title-conventional-commits,CC1 # using env variable GITLINT_CONTRIB=contrib-title-conventional-commits,CC1 gitlint #.gitlint [general] contrib=contrib-title-conventional-commits,CC1",
		"title": "Examples"
	}, {
		"location": "configuration/#staged",
		"text": "Fetch additional meta-data from the local repository when manually passing a commit message to gitlint via stdin or --commit-msg . Default value gitlint version commandline flag environment variable false >= 0.13.0 --staged GITLINT_STAGED",
		"title": "staged"
	}, {
		"location": "configuration/#examples_7",
		"text": "# CLI gitlint --staged gitlint -c general.staged=true # different way of doing the same GITLINT_STAGED=1 gitlint # using env variable #.gitlint [general] staged=true",
		"title": "Examples"
	}, {
		"location": "configuration/#fail-without-commits",
		"text": "Hard fail when the target commit range is empty. Note that gitlint will already fail by default on invalid commit ranges. This option is specifically to tell gitlint to fail on valid but empty commit ranges. Default value gitlint version commandline flag environment variable false >= 0.15.2 --fail-without-commits GITLINT_FAIL_WITHOUT_COMMITS",
		"title": "fail-without-commits"
	}, {
		"location": "configuration/#examples_8",
		"text": "# CLI # The following will cause gitlint to hard fail (i.e. exit code > 0) # since HEAD..HEAD is a valid but empty commit range. gitlint --fail-without-commits --commits HEAD..HEAD GITLINT_FAIL_WITHOUT_COMMITS=1 gitlint # using env variable #.gitlint [general] fail-without-commits=true",
		"title": "Examples"
	}, {
		"location": "configuration/#ignore-stdin",
		"text": "Ignore any stdin data. Sometimes useful when running gitlint in a CI server. Default value gitlint version commandline flag environment variable false >= 0.12.0 --ignore-stdin GITLINT_IGNORE_STDIN",
		"title": "ignore-stdin"
	}, {
		"location": "configuration/#examples_9",
		"text": "# CLI gitlint --ignore-stdin gitlint -c general.ignore-stdin=true # different way of doing the same GITLINT_IGNORE_STDIN=1 gitlint # using env variable #.gitlint [general] ignore-stdin=true",
		"title": "Examples"
	}, {
		"location": "configuration/#ignore-merge-commits",
		"text": "Whether or not to ignore merge commits. Default value gitlint version commandline flag environment variable true >= 0.7.0 Not Available Not Available",
		"title": "ignore-merge-commits"
	}, {
		"location": "configuration/#examples_10",
		"text": "# CLI gitlint -c general.ignore-merge-commits=false #.gitlint [general] ignore-merge-commits=false",
		"title": "Examples"
	}, {
		"location": "configuration/#ignore-revert-commits",
		"text": "Whether or not to ignore revert commits. Default value gitlint version commandline flag environment variable true >= 0.13.0 Not Available Not Available",
		"title": "ignore-revert-commits"
	}, {
		"location": "configuration/#examples_11",
		"text": "# CLI gitlint -c general.ignore-revert-commits=false #.gitlint [general] ignore-revert-commits=false",
		"title": "Examples"
	}, {
		"location": "configuration/#ignore-fixup-commits",
		"text": "Whether or not to ignore fixup commits. Default value gitlint version commandline flag environment variable true >= 0.9.0 Not Available Not Available",
		"title": "ignore-fixup-commits"
	}, {
		"location": "configuration/#examples_12",
		"text": "# CLI gitlint -c general.ignore-fixup-commits=false #.gitlint [general] ignore-fixup-commits=false",
		"title": "Examples"
	}, {
		"location": "configuration/#ignore-squash-commits",
		"text": "Whether or not to ignore squash commits. Default value gitlint version commandline flag environment variable true >= 0.9.0 Not Available Not Available",
		"title": "ignore-squash-commits"
	}, {
		"location": "configuration/#examples_13",
		"text": "# CLI gitlint -c general.ignore-squash-commits=false #.gitlint [general] ignore-squash-commits=false",
		"title": "Examples"
	}, {
		"location": "contrib_rules/",
		"text": "Using Contrib Rules Introduced in gitlint v0.12.0 Contrib rules are community- contrib uted rules that are disabled by default, but can be enabled through configuration. Contrib rules are meant to augment default gitlint behavior by providing users with rules for common use-cases without forcing these rules on all gitlint users. This also means that users don't have to re-implement these commonly used rules themselves as user-defined rules. To enable certain contrib rules, you can use the --contrib flag. $ cat examples/commit-message-1 | gitlint --contrib contrib-title-conventional-commits,CC1 1: CC1 Body does not contain a 'Signed-off-by' line 1: CL1 Title does not start with one of fix, feat, chore, docs, style, refactor, perf, test: \"WIP: This is the title of a commit message.\" # These are the default violations 1: T3 Title has trailing punctuation (.): \"WIP: This is the title of a commit message.\" 1: T5 Title contains the word 'WIP' (case-insensitive): \"WIP: This is the title of a commit message.\" 2: B4 Second line is not empty: \"The second line should typically be empty\" 3: B1 Line exceeds max length (123>80): \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.\" Same thing using a .gitlint file: [general] # You HAVE to add the rule here to enable it, only configuring (such as below) # does NOT enable it. contrib=contrib-title-conventional-commits,CC1 [contrib-title-conventional-commits] # Specify allowed commit types. For details see: https://www.conventionalcommits.org/ types = bugfix,user-story,epic You can also configure contrib rules using any of the other ways to configure gitlint . Available Contrib Rules ID Name gitlint version Description CT1 contrib-title-conventional-commits >= 0.12.0 Enforces Conventional Commits commit message style on the title. CC1 contrib-body-requires-signed-off-by >= 0.12.0 Commit body must contain a Signed-off-by line. CT1: contrib-title-conventional-commits ID Name gitlint version Description CT1 contrib-title-conventional-commits >= 0.12.0 Enforces Conventional Commits commit message style on the title. Options Name gitlint version Default Description types >= 0.12.0 fix,feat,chore,docs,style,refactor,perf,test,revert,ci,build Comma separated list of allowed commit types. CC1: contrib-body-requires-signed-off-by ID Name gitlint version Description CC1 contrib-body-requires-signed-off-by >= 0.12.0 Commit body must contain a Signed-off-by line. This means, a line that starts with the Signed-off-by keyword. Contributing Contrib rules We'd love for you to contribute new Contrib rules to gitlint or improve existing ones! Please visit the Contributing page on how to get started.",
		"title": "Contrib Rules"
	}, {
		"location": "contrib_rules/#using-contrib-rules",
		"text": "Introduced in gitlint v0.12.0 Contrib rules are community- contrib uted rules that are disabled by default, but can be enabled through configuration. Contrib rules are meant to augment default gitlint behavior by providing users with rules for common use-cases without forcing these rules on all gitlint users. This also means that users don't have to re-implement these commonly used rules themselves as user-defined rules. To enable certain contrib rules, you can use the --contrib flag. $ cat examples/commit-message-1 | gitlint --contrib contrib-title-conventional-commits,CC1 1: CC1 Body does not contain a 'Signed-off-by' line 1: CL1 Title does not start with one of fix, feat, chore, docs, style, refactor, perf, test: \"WIP: This is the title of a commit message.\" # These are the default violations 1: T3 Title has trailing punctuation (.): \"WIP: This is the title of a commit message.\" 1: T5 Title contains the word 'WIP' (case-insensitive): \"WIP: This is the title of a commit message.\" 2: B4 Second line is not empty: \"The second line should typically be empty\" 3: B1 Line exceeds max length (123>80): \"Lines typically need to have a max length, meaning that they can't exceed a preset number of characters, usually 80 or 120.\" Same thing using a .gitlint file: [general] # You HAVE to add the rule here to enable it, only configuring (such as below) # does NOT enable it. contrib=contrib-title-conventional-commits,CC1 [contrib-title-conventional-commits] # Specify allowed commit types. For details see: https://www.conventionalcommits.org/ types = bugfix,user-story,epic You can also configure contrib rules using any of the other ways to configure gitlint .",
		"title": "Using Contrib Rules"
	}, {
		"location": "contrib_rules/#available-contrib-rules",
		"text": "ID Name gitlint version Description CT1 contrib-title-conventional-commits >= 0.12.0 Enforces Conventional Commits commit message style on the title. CC1 contrib-body-requires-signed-off-by >= 0.12.0 Commit body must contain a Signed-off-by line.",
		"title": "Available Contrib Rules"
	}, {
		"location": "contrib_rules/#ct1-contrib-title-conventional-commits",
		"text": "ID Name gitlint version Description CT1 contrib-title-conventional-commits >= 0.12.0 Enforces Conventional Commits commit message style on the title.",
		"title": "CT1: contrib-title-conventional-commits"
	}, {
		"location": "contrib_rules/#options",
		"text": "Name gitlint version Default Description types >= 0.12.0 fix,feat,chore,docs,style,refactor,perf,test,revert,ci,build Comma separated list of allowed commit types.",
		"title": "Options"
	}, {
		"location": "contrib_rules/#cc1-contrib-body-requires-signed-off-by",
		"text": "ID Name gitlint version Description CC1 contrib-body-requires-signed-off-by >= 0.12.0 Commit body must contain a Signed-off-by line. This means, a line that starts with the Signed-off-by keyword.",
		"title": "CC1: contrib-body-requires-signed-off-by"
	}, {
		"location": "contrib_rules/#contributing-contrib-rules",
		"text": "We'd love for you to contribute new Contrib rules to gitlint or improve existing ones! Please visit the Contributing page on how to get started.",
		"title": "Contributing Contrib rules"
	}, {
		"location": "contributing/",
		"text": "Contributing We'd love for you to contribute to gitlint. Thanks for your interest! The source-code and issue tracker are hosted on Github. Often it takes a while for us (well, actually just me ) to get back to you (sometimes up to a few months, this is a hobby project), but rest assured that we read your message and appreciate your interest! We maintain a loose roadmap on our wiki , but that's open to a lot of change and input. Guidelines When contributing code, please consider all the parts that are typically required: Unit tests (automatically enforced by CI ). Please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Integration tests (also automatically enforced by CI ). Again, please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Documentation Since we want to maintain a high standard of quality, all of these things will have to be done regardless before code can make it as part of a release. If you can already include them as part of your PR, it's a huge timesaver for us and it's likely that your PR will be merged and released a lot sooner. Thanks! Important On the topic of releases : Gitlint releases typically go out when there's either enough new features and fixes to make it worthwhile or when there's a critical fix for a bug that fundamentally breaks gitlint. While the amount of overhead of doing a release isn't huge, it's also not zero. In practice this means that it might take weeks or months before merged code actually gets released - we know that can be frustrating but please understand it's a well-considered trade-off based on available time. Development There is a Vagrantfile (Ubuntu) in this repository that can be used for development. It comes pre-installed with all Python versions that gitlint supports. vagrant up vagrant ssh Or you can choose to use your local environment: python -m venv .venv . .venv/bin/activate pip install --upgrade pip pip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt python setup.py develop To run tests: ./run_tests.sh # run unit tests and print test coverage ./run_tests.sh gitlint/tests/rules/test_body_rules.py::BodyRuleTests::test_body_missing # run a single test ./run_tests.sh --no-coverage # run unit tests without test coverage ./run_tests.sh --collect-only --no-coverage # Only collect, don't run unit tests ./run_tests.sh --integration # Run integration tests (requires that you have gitlint installed) ./run_tests.sh --build # Run build tests (=build python package) ./run_tests.sh --pep8 # pep8 checks ./run_tests.sh --stats # print some code stats ./run_tests.sh --git # inception: run gitlint against itself ./run_tests.sh --lint # run pylint checks ./run_tests.sh --all # Run unit, integration, pep8 and gitlint checks The Vagrantfile comes with virtualenv s for python 3.6, 3.7, 3.8, 3.9 and pypy3.6. You can easily run tests against specific python environments by using the following commands inside of the Vagrant VM: ./run_tests.sh --envs 36 # Run the unit tests against Python 3.6 ./run_tests.sh --envs 36,37,pypy36 # Run the unit tests against Python 3.6, Python 3.7 and Pypy3.6 ./run_tests.sh --envs 36,37 --pep8 # Run pep8 checks against Python 3.6 and Python 3.7 (also works for --git, --integration, --pep8, --stats and --lint. ./run_tests.sh --envs all --all # Run all tests against all environments ./run_tests.sh --all-env --all # Idem: Run all tests against all environments Important Gitlint commits and pull requests are gated on all of our tests and checks. Packaging To see the package description in HTML format pip install docutils export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 python setup.py --long-description | rst2html.py > output.html Documentation We use mkdocs for generating our documentation from markdown. To use it, do the following outside of the vagrant box (on your host machine): pip install -r doc-requirements.txt # install doc requirements mkdocs serve Then access the documentation website on your host machine on http://localhost:8000 . Tools We keep a small set of scripts in the tools/ directory: tools/create-test-repo.sh # Create a test git repo in your /tmp directory tools/windows/create-test-repo.bat # Windows: create git test repo tools/windows/run_tests.bat # Windows run unit tests Contrib rules Since gitlint 0.12.0, we support Contrib rules : community contributed rules that are part of gitlint itself. Thanks for considering to add a new one to gitlint! Before starting, please read all the other documentation on this page about contributing first. Then, we suggest taking the following approach to add a Contrib rule: Write your rule as a user-defined rule . In terms of code, Contrib rules are identical to user-defined rules, they just happen to have their code sit within the gitlint codebase itself. Add your user-defined rule to gitlint . You should put your file(s) in the gitlint/contrib/rules directory. Write unit tests . The gitlint codebase contains Contrib rule test files you can copy and modify . Write documentation . In particular, you should update the gitlint/docs/contrib_rules.md file with details on your Contrib rule. Create a Pull Request : code review typically requires a bit of back and forth. Thanks for your contribution! Contrib rule requirements If you follow the steps above and follow the existing gitlint conventions wrt naming things, you should already be fairly close to done. In case you're looking for a slightly more formal spec, here's what gitlint requires of Contrib rules. Since Contrib rules are really just user-defined rules that live within the gitlint code-base, all the user-rule requirements also apply to Contrib rules. All contrib rules must have associated unit tests. We sort of enforce this by a unit test that verifies that there's a test file for each contrib file. All contrib rules must have names that start with contrib- . This is to easily distinguish them from default gitlint rules. All contrib rule ids must start with CT (for LineRules targeting the title), CB (for LineRules targeting the body) or CC (for CommitRules). Again, this is to easily distinguish them from default gitlint rules. All contrib rules must have unique names and ids. You can add multiple rule classes to the same file, but classes should be logically grouped together in a single file that implements related rules. Contrib rules should be meaningfully different from one another. If a behavior change or tweak can be added to an existing rule by adding options, that should be considered first. However, large god classes that implement multiple rules in a single class should obviously also be avoided. Contrib rules should use options to make rules configurable.",
		"title": "Contributing"
	}, {
		"location": "contributing/#contributing",
		"text": "We'd love for you to contribute to gitlint. Thanks for your interest! The source-code and issue tracker are hosted on Github. Often it takes a while for us (well, actually just me ) to get back to you (sometimes up to a few months, this is a hobby project), but rest assured that we read your message and appreciate your interest! We maintain a loose roadmap on our wiki , but that's open to a lot of change and input.",
		"title": "Contributing"
	}, {
		"location": "contributing/#guidelines",
		"text": "When contributing code, please consider all the parts that are typically required: Unit tests (automatically enforced by CI ). Please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Integration tests (also automatically enforced by CI ). Again, please consider writing new ones for your functionality, not only updating existing ones to make the build pass. Documentation Since we want to maintain a high standard of quality, all of these things will have to be done regardless before code can make it as part of a release. If you can already include them as part of your PR, it's a huge timesaver for us and it's likely that your PR will be merged and released a lot sooner. Thanks! Important On the topic of releases : Gitlint releases typically go out when there's either enough new features and fixes to make it worthwhile or when there's a critical fix for a bug that fundamentally breaks gitlint. While the amount of overhead of doing a release isn't huge, it's also not zero. In practice this means that it might take weeks or months before merged code actually gets released - we know that can be frustrating but please understand it's a well-considered trade-off based on available time.",
		"title": "Guidelines"
	}, {
		"location": "contributing/#development",
		"text": "There is a Vagrantfile (Ubuntu) in this repository that can be used for development. It comes pre-installed with all Python versions that gitlint supports. vagrant up vagrant ssh Or you can choose to use your local environment: python -m venv .venv . .venv/bin/activate pip install --upgrade pip pip install -r requirements.txt -r test-requirements.txt -r doc-requirements.txt python setup.py develop To run tests: ./run_tests.sh # run unit tests and print test coverage ./run_tests.sh gitlint/tests/rules/test_body_rules.py::BodyRuleTests::test_body_missing # run a single test ./run_tests.sh --no-coverage # run unit tests without test coverage ./run_tests.sh --collect-only --no-coverage # Only collect, don't run unit tests ./run_tests.sh --integration # Run integration tests (requires that you have gitlint installed) ./run_tests.sh --build # Run build tests (=build python package) ./run_tests.sh --pep8 # pep8 checks ./run_tests.sh --stats # print some code stats ./run_tests.sh --git # inception: run gitlint against itself ./run_tests.sh --lint # run pylint checks ./run_tests.sh --all # Run unit, integration, pep8 and gitlint checks The Vagrantfile comes with virtualenv s for python 3.6, 3.7, 3.8, 3.9 and pypy3.6. You can easily run tests against specific python environments by using the following commands inside of the Vagrant VM: ./run_tests.sh --envs 36 # Run the unit tests against Python 3.6 ./run_tests.sh --envs 36,37,pypy36 # Run the unit tests against Python 3.6, Python 3.7 and Pypy3.6 ./run_tests.sh --envs 36,37 --pep8 # Run pep8 checks against Python 3.6 and Python 3.7 (also works for --git, --integration, --pep8, --stats and --lint. ./run_tests.sh --envs all --all # Run all tests against all environments ./run_tests.sh --all-env --all # Idem: Run all tests against all environments Important Gitlint commits and pull requests are gated on all of our tests and checks.",
		"title": "Development"
	}, {
		"location": "contributing/#packaging",
		"text": "To see the package description in HTML format pip install docutils export LC_ALL=en_US.UTF-8 export LANG=en_US.UTF-8 python setup.py --long-description | rst2html.py > output.html",
		"title": "Packaging"
	}, {
		"location": "contributing/#documentation",
		"text": "We use mkdocs for generating our documentation from markdown. To use it, do the following outside of the vagrant box (on your host machine): pip install -r doc-requirements.txt # install doc requirements mkdocs serve Then access the documentation website on your host machine on http://localhost:8000 .",
		"title": "Documentation"
	}, {
		"location": "contributing/#tools",
		"text": "We keep a small set of scripts in the tools/ directory: tools/create-test-repo.sh # Create a test git repo in your /tmp directory tools/windows/create-test-repo.bat # Windows: create git test repo tools/windows/run_tests.bat # Windows run unit tests",
		"title": "Tools"
	}, {
		"location": "contributing/#contrib-rules",
		"text": "Since gitlint 0.12.0, we support Contrib rules : community contributed rules that are part of gitlint itself. Thanks for considering to add a new one to gitlint! Before starting, please read all the other documentation on this page about contributing first. Then, we suggest taking the following approach to add a Contrib rule: Write your rule as a user-defined rule . In terms of code, Contrib rules are identical to user-defined rules, they just happen to have their code sit within the gitlint codebase itself. Add your user-defined rule to gitlint . You should put your file(s) in the gitlint/contrib/rules directory. Write unit tests . The gitlint codebase contains Contrib rule test files you can copy and modify . Write documentation . In particular, you should update the gitlint/docs/contrib_rules.md file with details on your Contrib rule. Create a Pull Request : code review typically requires a bit of back and forth. Thanks for your contribution!",
		"title": "Contrib rules"
	}, {
		"location": "contributing/#contrib-rule-requirements",
		"text": "If you follow the steps above and follow the existing gitlint conventions wrt naming things, you should already be fairly close to done. In case you're looking for a slightly more formal spec, here's what gitlint requires of Contrib rules. Since Contrib rules are really just user-defined rules that live within the gitlint code-base, all the user-rule requirements also apply to Contrib rules. All contrib rules must have associated unit tests. We sort of enforce this by a unit test that verifies that there's a test file for each contrib file. All contrib rules must have names that start with contrib- . This is to easily distinguish them from default gitlint rules. All contrib rule ids must start with CT (for LineRules targeting the title), CB (for LineRules targeting the body) or CC (for CommitRules). Again, this is to easily distinguish them from default gitlint rules. All contrib rules must have unique names and ids. You can add multiple rule classes to the same file, but classes should be logically grouped together in a single file that implements related rules. Contrib rules should be meaningfully different from one another. If a behavior change or tweak can be added to an existing rule by adding options, that should be considered first. However, large god classes that implement multiple rules in a single class should obviously also be avoided. Contrib rules should use options to make rules configurable.",
		"title": "Contrib rule requirements"
	}, {
		"location": "rules/",
		"text": "Overview The table below shows an overview of all gitlint's built-in rules, with more specific details further down the page. Gitlint also has community contrib uted rules which are not listed here as they're disabled by default. In addition, you can also write your own user-defined rule in case you don't find what you're looking for. ID Name gitlint version Description T1 title-max-length >= 0.1.0 Title length must be < 72 chars. T2 title-trailing-whitespace >= 0.1.0 Title cannot have trailing whitespace (space or tab) T3 title-trailing-punctuation >= 0.1.0 Title cannot have trailing punctuation (?:!.,;) T4 title-hard-tab >= 0.1.0 Title cannot contain hard tab characters (\\t) T5 title-must-not-contain-word >= 0.1.0 Title cannot contain certain words (default: \"WIP\") T6 title-leading-whitespace >= 0.4.0 Title cannot have leading whitespace (space or tab) T7 title-match-regex >= 0.5.0 Title must match a given regex (default: None) T8 title-min-length >= 0.14.0 Title length must be > 5 chars. B1 body-max-line-length >= 0.1.0 Lines in the body must be < 80 chars B2 body-trailing-whitespace >= 0.1.0 Body cannot have trailing whitespace (space or tab) B3 body-hard-tab >= 0.1.0 Body cannot contain hard tab characters (\\t) B4 body-first-line-empty >= 0.1.0 First line of the body (second line of commit message) must be empty B5 body-min-length >= 0.4.0 Body length must be at least 20 characters B6 body-is-missing >= 0.4.0 Body message must be specified B7 body-changed-file-mention >= 0.4.0 Body must contain references to certain files if those files are changed in the last commit B8 body-match-regex >= 0.14.0 Title must match a given regex (default: None) M1 author-valid-email >= 0.9.0 Author email address must be a valid email address I1 ignore-by-title >= 0.10.0 Ignore a commit based on matching its title I2 ignore-by-body >= 0.10.0 Ignore a commit based on matching its body I3 ignore-body-lines >= 0.14.0 Ignore certain lines in a commit body that match a regex I4 ignore-by-author-name >= 0.16.0 Ignore a commit based on matching its author name T1: title-max-length ID Name gitlint version Description T1 title-max-length >= 0.1 Title length must be < 72 chars. Options Name gitlint version Default Description line-length >= 0.2 72 Maximum allowed title length Examples .gitlint # Titles should be max 72 chars [title-max-length] line-length=72 # It's the 21st century, titles can be 120 chars long [title-max-length] line-length=120 T2: title-trailing-whitespace ID Name gitlint version Description T2 title-trailing-whitespace >= 0.1 Title cannot have trailing whitespace (space or tab) T3: title-trailing-punctuation ID Name gitlint version Description T3 title-trailing-punctuation >= 0.1 Title cannot have trailing punctuation (?:!.,;) T4: title-hard-tab ID Name gitlint version Description T4 title-hard-tab >= 0.1 Title cannot contain hard tab characters (\\t) T5: title-must-not-contain-word ID Name gitlint version Description T5 title-must-not-contain-word >= 0.1 Title cannot contain certain words (default: \"WIP\") Options Name gitlint version Default Description words >= 0.3 WIP Comma-separated list of words that should not be used in the title. Matching is case insensitive Examples .gitlint # Ensure the title doesn't contain swear words [title-must-not-contain-word] words=crap,darn,damn T6: title-leading-whitespace ID Name gitlint version Description T6 title-leading-whitespace >= 0.4 Title cannot have leading whitespace (space or tab) T7: title-match-regex ID Name gitlint version Description T7 title-match-regex >= 0.5 Title must match a given regex (default: .*) Options Name gitlint version Default Description regex >= 0.5 .* Python regex that the title should match. Examples .gitlint # Ensure every title starts with a user-story like US123 [title-match-regex] regex=^US[1-9][0-9]* T8: title-min-length ID Name gitlint version Description T1 title-min-length >= Title length must be > 5 chars. Options Name gitlint version Default Description min-length >= 0.14.0 5 Minimum required title length Examples .gitlint # Titles should be min 3 chars [title-min-length] min-length=3 B1: body-max-line-length ID Name gitlint version Description B1 body-max-line-length >= 0.1 Lines in the body must be < 80 chars Options Name gitlint version Default Description line-length >= 0.2 80 Maximum allowed line length in the commit message body Examples .gitlint # It's the 21st century, lines can be 120 chars long [body-max-line-length] line-length=120 # Your tool prefers 72 [body-max-line-length] line-length=72 B2: body-trailing-whitespace ID Name gitlint version Description B2 body-trailing-whitespace >= 0.1 Body cannot have trailing whitespace (space or tab) B3: body-hard-tab ID Name gitlint version Description B3 body-hard-tab >= 0.1 Body cannot contain hard tab characters (\\t) B4: body-first-line-empty ID Name gitlint version Description B4 body-first-line-empty >= 0.1 First line of the body (second line of commit message) must be empty B5: body-min-length ID Name gitlint version Description B5 body-min-length >= 0.4 Body length must be at least 20 characters. In versions >= 0.8.0, gitlint will not count newline characters. Options Name gitlint version Default Description min-length >= 0.4 20 Minimum number of required characters in body Examples .gitlint # You want *something* in every commit body, but doesn't have to be as long as 20 chars. [body-min-length] min-length=5 # You want a more elaborate message in every commit body [body-min-length] min-length=100 B6: body-is-missing ID Name gitlint version Description B6 body-is-missing >= 0.4 Body message must be specified Options Name gitlint version Default Description ignore-merge-commits >= 0.4 true Whether this rule should be ignored during merge commits. Allowed values: true,false. B7: body-changed-file-mention ID Name gitlint version Description B7 body-changed-file-mention >= 0.4 Body must contain references to certain files if those files are changed in the last commit Options Name gitlint version Default Description files >= 0.4 (empty) Comma-separated list of files that need to an explicit mention in the commit message in case they are changed. Examples .gitlint # Prevent that certain sensitive files are committed by mistake by forcing # users to mention them explicitly if they're deliberately changing them [body-changed-file-mention] files=generated.xml,secrets.txt,private-key.pem B8: body-match-regex ID Name gitlint version Description B8 body-match-regex >= 0.14 Body must match a given regex Options Name gitlint version Default Description regex >= 0.14 None Python regex that the title should match. Examples .gitlint # Ensure the body ends with Reviewed-By: <some value> [body-match-regex] regex=Reviewed-By:(.*)$ # Ensure body contains the word \"Foo\" somewhere [body-match-regex] regex=(*.)Foo(.*) M1: author-valid-email ID Name gitlint version Description M1 author-valid-email >= 0.8.3 Author email address must be a valid email address Note Email addresses are notoriously hard to validate and the official email valid spec is often too loose for any real world application . Gitlint by default takes a pragmatic approach and requires users to enter email addresses that contain a name, domain and tld and has no spaces. Options Name gitlint version Default Description regex >= 0.9.0 [^@ ]+@[^@ ]+\\.[^@ ]+ Python regex the commit author email address is matched against Examples .gitlint # Only allow email addresses from a foo.com domain [author-valid-email] regex=[^@]+@foo.com I1: ignore-by-title ID Name gitlint version Description I1 ignore-by-title >= 0.10.0 Ignore a commit based on matching its title. Options Name gitlint version Default Description regex >= 0.10.0 None Python regex to match against commit title. On match, the commit will be ignored. ignore >= 0.10.0 all Comma-separated list of rule names or ids to ignore when this rule is matched. Examples .gitlint # Match commit titles starting with Release # For those commits, ignore title-max-length and body-min-length rules [ignore-by-title] regex=^Release(.*) ignore=title-max-length,body-min-length # ignore all rules by setting ignore to 'all' # ignore=all I2: ignore-by-body ID Name gitlint version Description I2 ignore-by-body >= 0.10.0 Ignore a commit based on matching its body. Options Name gitlint version Default Description regex >= 0.10.0 None Python regex to match against each line of the body. On match, the commit will be ignored. ignore >= 0.10.0 all Comma-separated list of rule names or ids to ignore when this rule is matched. Examples .gitlint # Ignore all commits with a commit message body with a line that contains 'release' [ignore-by-body] regex=(.*)release(.*) ignore=all # For matching commits, only ignore rules T1, body-min-length, B6. # You can use both names as well as ids to refer to other rules. [ignore-by-body] regex=(.*)release(.*) ignore=T1,body-min-length,B6 I3: ignore-body-lines ID Name gitlint version Description I3 ignore-body-lines >= 0.14.0 Ignore certain lines in a commit body that match a regex. Options Name gitlint version Default Description regex >= 0.14.0 None Python regex to match against each line of the body. On match, that line will be ignored by gitlint (the rest of the body will still be linted). Examples .gitlint # Ignore all lines that start with 'Co-Authored-By' [ignore-body-lines] regex=^Co-Authored-By # Ignore lines that start with 'Co-Authored-By' or with 'Signed-off-by' [ignore-body-lines] regex=(^Co-Authored-By)|(^Signed-off-by) # Ignore lines that contain 'foobar' [ignore-body-lines] regex=(.*)foobar(.*) I4: ignore-by-author-name ID Name gitlint version Description I4 ignore-by-author-name >= 0.16.0 Ignore a commit based on matching its author name. Options Name gitlint version Default Description regex >= 0.16.0 None Python regex to match against the commit author name. On match, the commit will be ignored. ignore >= 0.16.0 all Comma-separated list of rule names or ids to ignore when this rule is matched. Examples .gitlint # Ignore all commits authored by dependabot [ignore-by-author-name] regex=dependabot # For commits made by anyone with \"[bot]\" in their name, ignore # rules T1, body-min-length and B6 [ignore-by-author-name] regex=(.*)\\[bot\\](.*) ignore=T1,body-min-length,B6",
		"title": "Rules"
	}, {
		"location": "rules/#overview",
		"text": "The table below shows an overview of all gitlint's built-in rules, with more specific details further down the page. Gitlint also has community contrib uted rules which are not listed here as they're disabled by default. In addition, you can also write your own user-defined rule in case you don't find what you're looking for. ID Name gitlint version Description T1 title-max-length >= 0.1.0 Title length must be < 72 chars. T2 title-trailing-whitespace >= 0.1.0 Title cannot have trailing whitespace (space or tab) T3 title-trailing-punctuation >= 0.1.0 Title cannot have trailing punctuation (?:!.,;) T4 title-hard-tab >= 0.1.0 Title cannot contain hard tab characters (\\t) T5 title-must-not-contain-word >= 0.1.0 Title cannot contain certain words (default: \"WIP\") T6 title-leading-whitespace >= 0.4.0 Title cannot have leading whitespace (space or tab) T7 title-match-regex >= 0.5.0 Title must match a given regex (default: None) T8 title-min-length >= 0.14.0 Title length must be > 5 chars. B1 body-max-line-length >= 0.1.0 Lines in the body must be < 80 chars B2 body-trailing-whitespace >= 0.1.0 Body cannot have trailing whitespace (space or tab) B3 body-hard-tab >= 0.1.0 Body cannot contain hard tab characters (\\t) B4 body-first-line-empty >= 0.1.0 First line of the body (second line of commit message) must be empty B5 body-min-length >= 0.4.0 Body length must be at least 20 characters B6 body-is-missing >= 0.4.0 Body message must be specified B7 body-changed-file-mention >= 0.4.0 Body must contain references to certain files if those files are changed in the last commit B8 body-match-regex >= 0.14.0 Title must match a given regex (default: None) M1 author-valid-email >= 0.9.0 Author email address must be a valid email address I1 ignore-by-title >= 0.10.0 Ignore a commit based on matching its title I2 ignore-by-body >= 0.10.0 Ignore a commit based on matching its body I3 ignore-body-lines >= 0.14.0 Ignore certain lines in a commit body that match a regex I4 ignore-by-author-name >= 0.16.0 Ignore a commit based on matching its author name",
		"title": "Overview"
	}, {
		"location": "rules/#t1-title-max-length",
		"text": "ID Name gitlint version Description T1 title-max-length >= 0.1 Title length must be < 72 chars.",
		"title": "T1: title-max-length"
	}, {
		"location": "rules/#options",
		"text": "Name gitlint version Default Description line-length >= 0.2 72 Maximum allowed title length",
		"title": "Options"
	}, {
		"location": "rules/#examples",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint",
		"text": "# Titles should be max 72 chars [title-max-length] line-length=72 # It's the 21st century, titles can be 120 chars long [title-max-length] line-length=120",
		"title": ".gitlint"
	}, {
		"location": "rules/#t2-title-trailing-whitespace",
		"text": "ID Name gitlint version Description T2 title-trailing-whitespace >= 0.1 Title cannot have trailing whitespace (space or tab)",
		"title": "T2: title-trailing-whitespace"
	}, {
		"location": "rules/#t3-title-trailing-punctuation",
		"text": "ID Name gitlint version Description T3 title-trailing-punctuation >= 0.1 Title cannot have trailing punctuation (?:!.,;)",
		"title": "T3: title-trailing-punctuation"
	}, {
		"location": "rules/#t4-title-hard-tab",
		"text": "ID Name gitlint version Description T4 title-hard-tab >= 0.1 Title cannot contain hard tab characters (\\t)",
		"title": "T4: title-hard-tab"
	}, {
		"location": "rules/#t5-title-must-not-contain-word",
		"text": "ID Name gitlint version Description T5 title-must-not-contain-word >= 0.1 Title cannot contain certain words (default: \"WIP\")",
		"title": "T5: title-must-not-contain-word"
	}, {
		"location": "rules/#options_1",
		"text": "Name gitlint version Default Description words >= 0.3 WIP Comma-separated list of words that should not be used in the title. Matching is case insensitive",
		"title": "Options"
	}, {
		"location": "rules/#examples_1",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_1",
		"text": "# Ensure the title doesn't contain swear words [title-must-not-contain-word] words=crap,darn,damn",
		"title": ".gitlint"
	}, {
		"location": "rules/#t6-title-leading-whitespace",
		"text": "ID Name gitlint version Description T6 title-leading-whitespace >= 0.4 Title cannot have leading whitespace (space or tab)",
		"title": "T6: title-leading-whitespace"
	}, {
		"location": "rules/#t7-title-match-regex",
		"text": "ID Name gitlint version Description T7 title-match-regex >= 0.5 Title must match a given regex (default: .*)",
		"title": "T7: title-match-regex"
	}, {
		"location": "rules/#options_2",
		"text": "Name gitlint version Default Description regex >= 0.5 .* Python regex that the title should match.",
		"title": "Options"
	}, {
		"location": "rules/#examples_2",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_2",
		"text": "# Ensure every title starts with a user-story like US123 [title-match-regex] regex=^US[1-9][0-9]*",
		"title": ".gitlint"
	}, {
		"location": "rules/#t8-title-min-length",
		"text": "ID Name gitlint version Description T1 title-min-length >= Title length must be > 5 chars.",
		"title": "T8: title-min-length"
	}, {
		"location": "rules/#options_3",
		"text": "Name gitlint version Default Description min-length >= 0.14.0 5 Minimum required title length",
		"title": "Options"
	}, {
		"location": "rules/#examples_3",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_3",
		"text": "# Titles should be min 3 chars [title-min-length] min-length=3",
		"title": ".gitlint"
	}, {
		"location": "rules/#b1-body-max-line-length",
		"text": "ID Name gitlint version Description B1 body-max-line-length >= 0.1 Lines in the body must be < 80 chars",
		"title": "B1: body-max-line-length"
	}, {
		"location": "rules/#options_4",
		"text": "Name gitlint version Default Description line-length >= 0.2 80 Maximum allowed line length in the commit message body",
		"title": "Options"
	}, {
		"location": "rules/#examples_4",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_4",
		"text": "# It's the 21st century, lines can be 120 chars long [body-max-line-length] line-length=120 # Your tool prefers 72 [body-max-line-length] line-length=72",
		"title": ".gitlint"
	}, {
		"location": "rules/#b2-body-trailing-whitespace",
		"text": "ID Name gitlint version Description B2 body-trailing-whitespace >= 0.1 Body cannot have trailing whitespace (space or tab)",
		"title": "B2: body-trailing-whitespace"
	}, {
		"location": "rules/#b3-body-hard-tab",
		"text": "ID Name gitlint version Description B3 body-hard-tab >= 0.1 Body cannot contain hard tab characters (\\t)",
		"title": "B3: body-hard-tab"
	}, {
		"location": "rules/#b4-body-first-line-empty",
		"text": "ID Name gitlint version Description B4 body-first-line-empty >= 0.1 First line of the body (second line of commit message) must be empty",
		"title": "B4: body-first-line-empty"
	}, {
		"location": "rules/#b5-body-min-length",
		"text": "ID Name gitlint version Description B5 body-min-length >= 0.4 Body length must be at least 20 characters. In versions >= 0.8.0, gitlint will not count newline characters.",
		"title": "B5: body-min-length"
	}, {
		"location": "rules/#options_5",
		"text": "Name gitlint version Default Description min-length >= 0.4 20 Minimum number of required characters in body",
		"title": "Options"
	}, {
		"location": "rules/#examples_5",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_5",
		"text": "# You want *something* in every commit body, but doesn't have to be as long as 20 chars. [body-min-length] min-length=5 # You want a more elaborate message in every commit body [body-min-length] min-length=100",
		"title": ".gitlint"
	}, {
		"location": "rules/#b6-body-is-missing",
		"text": "ID Name gitlint version Description B6 body-is-missing >= 0.4 Body message must be specified",
		"title": "B6: body-is-missing"
	}, {
		"location": "rules/#options_6",
		"text": "Name gitlint version Default Description ignore-merge-commits >= 0.4 true Whether this rule should be ignored during merge commits. Allowed values: true,false.",
		"title": "Options"
	}, {
		"location": "rules/#b7-body-changed-file-mention",
		"text": "ID Name gitlint version Description B7 body-changed-file-mention >= 0.4 Body must contain references to certain files if those files are changed in the last commit",
		"title": "B7: body-changed-file-mention"
	}, {
		"location": "rules/#options_7",
		"text": "Name gitlint version Default Description files >= 0.4 (empty) Comma-separated list of files that need to an explicit mention in the commit message in case they are changed.",
		"title": "Options"
	}, {
		"location": "rules/#examples_6",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_6",
		"text": "# Prevent that certain sensitive files are committed by mistake by forcing # users to mention them explicitly if they're deliberately changing them [body-changed-file-mention] files=generated.xml,secrets.txt,private-key.pem",
		"title": ".gitlint"
	}, {
		"location": "rules/#b8-body-match-regex",
		"text": "ID Name gitlint version Description B8 body-match-regex >= 0.14 Body must match a given regex",
		"title": "B8: body-match-regex"
	}, {
		"location": "rules/#options_8",
		"text": "Name gitlint version Default Description regex >= 0.14 None Python regex that the title should match.",
		"title": "Options"
	}, {
		"location": "rules/#examples_7",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_7",
		"text": "# Ensure the body ends with Reviewed-By: <some value> [body-match-regex] regex=Reviewed-By:(.*)$ # Ensure body contains the word \"Foo\" somewhere [body-match-regex] regex=(*.)Foo(.*)",
		"title": ".gitlint"
	}, {
		"location": "rules/#m1-author-valid-email",
		"text": "ID Name gitlint version Description M1 author-valid-email >= 0.8.3 Author email address must be a valid email address Note Email addresses are notoriously hard to validate and the official email valid spec is often too loose for any real world application . Gitlint by default takes a pragmatic approach and requires users to enter email addresses that contain a name, domain and tld and has no spaces.",
		"title": "M1: author-valid-email"
	}, {
		"location": "rules/#options_9",
		"text": "Name gitlint version Default Description regex >= 0.9.0 [^@ ]+@[^@ ]+\\.[^@ ]+ Python regex the commit author email address is matched against",
		"title": "Options"
	}, {
		"location": "rules/#examples_8",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_8",
		"text": "# Only allow email addresses from a foo.com domain [author-valid-email] regex=[^@]+@foo.com",
		"title": ".gitlint"
	}, {
		"location": "rules/#i1-ignore-by-title",
		"text": "ID Name gitlint version Description I1 ignore-by-title >= 0.10.0 Ignore a commit based on matching its title.",
		"title": "I1: ignore-by-title"
	}, {
		"location": "rules/#options_10",
		"text": "Name gitlint version Default Description regex >= 0.10.0 None Python regex to match against commit title. On match, the commit will be ignored. ignore >= 0.10.0 all Comma-separated list of rule names or ids to ignore when this rule is matched.",
		"title": "Options"
	}, {
		"location": "rules/#examples_9",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_9",
		"text": "# Match commit titles starting with Release # For those commits, ignore title-max-length and body-min-length rules [ignore-by-title] regex=^Release(.*) ignore=title-max-length,body-min-length # ignore all rules by setting ignore to 'all' # ignore=all",
		"title": ".gitlint"
	}, {
		"location": "rules/#i2-ignore-by-body",
		"text": "ID Name gitlint version Description I2 ignore-by-body >= 0.10.0 Ignore a commit based on matching its body.",
		"title": "I2: ignore-by-body"
	}, {
		"location": "rules/#options_11",
		"text": "Name gitlint version Default Description regex >= 0.10.0 None Python regex to match against each line of the body. On match, the commit will be ignored. ignore >= 0.10.0 all Comma-separated list of rule names or ids to ignore when this rule is matched.",
		"title": "Options"
	}, {
		"location": "rules/#examples_10",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_10",
		"text": "# Ignore all commits with a commit message body with a line that contains 'release' [ignore-by-body] regex=(.*)release(.*) ignore=all # For matching commits, only ignore rules T1, body-min-length, B6. # You can use both names as well as ids to refer to other rules. [ignore-by-body] regex=(.*)release(.*) ignore=T1,body-min-length,B6",
		"title": ".gitlint"
	}, {
		"location": "rules/#i3-ignore-body-lines",
		"text": "ID Name gitlint version Description I3 ignore-body-lines >= 0.14.0 Ignore certain lines in a commit body that match a regex.",
		"title": "I3: ignore-body-lines"
	}, {
		"location": "rules/#options_12",
		"text": "Name gitlint version Default Description regex >= 0.14.0 None Python regex to match against each line of the body. On match, that line will be ignored by gitlint (the rest of the body will still be linted).",
		"title": "Options"
	}, {
		"location": "rules/#examples_11",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_11",
		"text": "# Ignore all lines that start with 'Co-Authored-By' [ignore-body-lines] regex=^Co-Authored-By # Ignore lines that start with 'Co-Authored-By' or with 'Signed-off-by' [ignore-body-lines] regex=(^Co-Authored-By)|(^Signed-off-by) # Ignore lines that contain 'foobar' [ignore-body-lines] regex=(.*)foobar(.*)",
		"title": ".gitlint"
	}, {
		"location": "rules/#i4-ignore-by-author-name",
		"text": "ID Name gitlint version Description I4 ignore-by-author-name >= 0.16.0 Ignore a commit based on matching its author name.",
		"title": "I4: ignore-by-author-name"
	}, {
		"location": "rules/#options_13",
		"text": "Name gitlint version Default Description regex >= 0.16.0 None Python regex to match against the commit author name. On match, the commit will be ignored. ignore >= 0.16.0 all Comma-separated list of rule names or ids to ignore when this rule is matched.",
		"title": "Options"
	}, {
		"location": "rules/#examples_12",
		"text": "",
		"title": "Examples"
	}, {
		"location": "rules/#gitlint_12",
		"text": "# Ignore all commits authored by dependabot [ignore-by-author-name] regex=dependabot # For commits made by anyone with \"[bot]\" in their name, ignore # rules T1, body-min-length and B6 [ignore-by-author-name] regex=(.*)\\[bot\\](.*) ignore=T1,body-min-length,B6",
		"title": ".gitlint"
	}, {
		"location": "user_defined_rules/",
		"text": "User Defined Rules Introduced in gitlint v0.8.0 Gitlint supports the concept of user-defined rules: the ability for users to write their own custom rules in python. In a nutshell, use --extra-path /home/joe/myextensions to point gitlint to a myextensions directory where it will search for python files containing gitlint rule classes. You can also specify a single python module, ie --extra-path /home/joe/my_rules.py . cat examples/commit-message-1 | gitlint --extra-path examples/ # Example output of a user-defined Signed-off-by rule 1: UC2 Body does not contain a 'Signed-off-by Line' # other violations were removed for brevity The SignedOffBy user-defined CommitRule was discovered by gitlint when it scanned examples/gitlint/my_commit_rules.py , which is part of the examples directory that was passed via --extra-path : # -*- coding: utf-8 -*- from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): \"\"\" This rule will enforce that each commit contains a \"Signed-off-by\" line. We keep things simple here and just check whether the commit body contains a line that starts with \"Signed-off-by\". \"\"\" # A rule MUST have a human friendly name name = \"body-requires-signed-off-by\" # A rule MUST have a *unique* id, we recommend starting with UC # (for User-defined Commit-rule). id = \"UC2\" def validate(self, commit): self.log.debug(\"SignedOffBy: This will be visible when running `gitlint --debug`\") for line in commit.message.body: if line.startswith(\"Signed-off-by\"): return msg = \"Body does not contain a 'Signed-off-by' line\" return [RuleViolation(self.id, msg, line_nr=1)] As always, --extra-path can also be set by adding it under the [general] section in your .gitlint file or using one of the other ways to configure gitlint . If you want to check whether your rules are properly discovered by gitlint, you can use the --debug flag: $ gitlint --debug --extra-path examples/ # [output cut for brevity] UC1: body-max-line-count body-max-line-count=3 UC2: body-requires-signed-off-by UL1: title-no-special-chars special-chars=['$', '^', '%', '@', '!', '*', '(', ')'] Note In most cases it's really the easiest to just copy an example from the examples directory and modify it to your needs. The remainder of this page contains the technical details, mostly for reference. Line and Commit Rules The SignedOffBy class above was an example of a user-defined CommitRule . Commit rules are gitlint rules that act on the entire commit at once. Once the rules are discovered, gitlint will automatically take care of applying them to the entire commit. This happens exactly once per commit. A CommitRule contrasts with a LineRule (see e.g.: examples/my_line_rules.py ) in that a CommitRule is only applied once on an entire commit while a LineRule is applied for every line in the commit (you can also apply it once to the title using a target - see the examples section below). The benefit of a commit rule is that it allows commit rules to implement more complex checks that span multiple lines and/or checks that should only be done once per commit. While every LineRule can be implemented as a CommitRule , it's usually easier and more concise to go with a LineRule if that fits your needs. Examples In terms of code, writing your own CommitRule or LineRule is very similar. The only 2 differences between a CommitRule and a LineRule are the parameters of the validate(...) method and the extra target attribute that LineRule requires. Consider the following CommitRule that can be found in examples/my_commit_rules.py : # -*- coding: utf-8 -*- from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): \"\"\" This rule will enforce that each commit contains a \"Signed-off-by\" line. We keep things simple here and just check whether the commit body contains a line that starts with \"Signed-off-by\". \"\"\" # A rule MUST have a human friendly name name = \"body-requires-signed-off-by\" # A rule MUST have a *unique* id, we recommend starting with UC # (for User-defined Commit-rule). id = \"UC2\" def validate(self, commit): self.log.debug(\"SignedOffBy: This will be visible when running `gitlint --debug`\") for line in commit.message.body: if line.startswith(\"Signed-off-by\"): return msg = \"Body does not contain a 'Signed-off-by' line\" return [RuleViolation(self.id, msg, line_nr=1)] Note the use of the name and id class attributes and the validate(...) method taking a single commit parameter. Contrast this with the following LineRule that can be found in examples/my_line_rules.py : # -*- coding: utf-8 -*- from gitlint.rules import LineRule, RuleViolation, CommitMessageTitle from gitlint.options import ListOption class SpecialChars(LineRule): \"\"\" This rule will enforce that the commit message title does not contai any of the following characters: $^%@!*() \"\"\" # A rule MUST have a human friendly name name = \"title-no-special-chars\" # A rule MUST have a *unique* id, we recommend starting with UL # for User-defined Line-rule), but this can really be anything. id = \"UL1\" # A line-rule MUST have a target (not required for CommitRules). target = CommitMessageTitle # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [ListOption('special-chars', ['$', '^', '%', '@', '!', '*', '(', ')'], \"Comma separated list of characters that should not occur in the title\")] def validate(self, line, _commit): self.log.debug(\"SpecialChars: This will be visible when running `gitlint --debug`\") violations = [] # options can be accessed by looking them up by their name in self.options for char in self.options['special-chars'].value: if char in line: msg = f\"Title contains the special character '{char}'\" violation = RuleViolation(self.id, msg, line) violations.append(violation) return violations Note the following 2 differences: extra target class attribute : in this example set to CommitMessageTitle indicating that this LineRule should only be applied once to the commit message title. The alternative value for target is CommitMessageBody , in which case gitlint will apply your rule to every line in the commit message body. validate(...) takes 2 parameters : Line rules get the line against which they are applied as the first parameter and the commit object of which the line is part of as second. In addition, you probably also noticed the extra options_spec class attribute which allows you to make your rules configurable. Options are not unique to LineRule s, they can also be used by CommitRule s and are further explained in the Options section below. The commit object Both CommitRule s and LineRule s take a commit object in their validate(...) methods. The table below outlines the various attributes of that commit object that can be used during validation. Property Type Description commit.message object Python object representing the commit message commit.message.original string Original commit message as returned by git commit.message.full string Full commit message, with comments (lines starting with #) removed. commit.message.title string Title/subject of the commit message: the first line commit.message.body string[] List of lines in the body of the commit message (i.e. starting from the second line) commit.author_name string Name of the author, result of git log --pretty=%aN commit.author_email string Email of the author, result of git log --pretty=%aE commit.date datetime Python datetime object representing the time of commit commit.is_merge_commit boolean Boolean indicating whether the commit is a merge commit or not. commit.is_revert_commit boolean Boolean indicating whether the commit is a revert commit or not. commit.is_fixup_commit boolean Boolean indicating whether the commit is a fixup commit or not. commit.is_squash_commit boolean Boolean indicating whether the commit is a squash commit or not. commit.parents string[] List of parent commit sha s (only for merge commits). commit.changed_files string[] List of files changed in the commit (relative paths). commit.branches string[] List of branch names the commit is part of commit.context object Object pointing to the bigger git context that the commit is part of commit.context.current_branch string Name of the currently active branch (of local repo) commit.context.repository_path string Absolute path pointing to the git repository being linted commit.context.commits object[] List of commits gitlint is acting on, NOT all commits in the repo. Violations In order to let gitlint know that there is a violation in the commit being linted, users should have the validate(...) method in their rules return a list of RuleViolation s. Important The validate(...) method doesn't always need to return a list, you can just skip the return statement in case there are no violations. However, in case of a single violation, validate should return a list with a single item. The RuleViolation class has the following generic signature: RuleViolation(rule_id, message, content=None, line_nr=None): With the parameters meaning the following: Parameter Type Description rule_id string Rule's unique string id message string Short description of the violation content string (optional) the violating part of commit or line line_nr int (optional) line number in the commit message where the violation occurs. Automatically set to the correct line number for LineRule s if not set explicitly. A typical validate(...) implementation for a CommitRule would then be as follows: def validate(self, commit) for line_nr, line in commit.message.body: if \"Jon Snow\" in line: # we add 1 to the line_nr because we offset the title which is on the first line return [RuleViolation(self.id, \"Commit message has the words 'Jon Snow' in it\", line, line_nr + 1)] return [] The parameters of this RuleViolation can be directly mapped onto gitlint's output as follows: Options In order to make your own rules configurable, you can add an optional options_spec attribute to your rule class (supported for both LineRule and CommitRule ). # -*- coding: utf-8 -*- from gitlint.rules import CommitRule, RuleViolation from gitlint.options import IntOption class BodyMaxLineCount(CommitRule): # A rule MUST have a human friendly name name = \"body-max-line-count\" # A rule MUST have a *unique* id, we recommend starting with UC (for # User-defined Commit-rule). id = \"UC1\" # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [IntOption('max-line-count', 3, \"Maximum body line count\")] def validate(self, commit): line_count = len(commit.message.body) max_line_count = self.options['max-line-count'].value if line_count > max_line_count: message = f\"Body contains too many lines ({line_count} > {max_line_count})\" return [RuleViolation(self.id, message, line_nr=1)] By using options_spec , you make your option available to be configured through a .gitlint file or one of the other ways to configure gitlint . Gitlint automatically takes care of the parsing and input validation. For example, to change the value of the max-line-count option, add the following to your .gitlint file: [body-max-line-count] body-max-line-count=1 As options_spec is a list, you can obviously have multiple options per rule. The general signature of an option is: Option(name, default_value, description) . Gitlint supports a variety of different option types, all can be imported from gitlint.options : Option Class Use for StrOption Strings IntOption Integers. IntOption takes an optional allow_negative parameter if you want to allow negative integers. BoolOption Booleans. Valid values: true , false . Case-insensitive. ListOption List of strings. Comma separated. PathOption Directory or file path. Takes an optional type parameter for specifying path type ( file , dir (=default) or both ). RegexOption String representing a Python-style regex - compiled and validated before rules are applied. Note Gitlint currently does not support options for all possible types (e.g. float, list of int, etc). We could use a hand getting those implemented ! Configuration Rules Introduced in gitlint v0.14.0 Configuration rules are special rules that are applied once per commit and BEFORE any other rules are run. Configuration rules are meant to dynamically change gitlint's configuration and/or the commit that is about to be linted. A typically use-case for this is when you want to modifying gitlint's behavior for all rules against a commit matching specific circumstances. Warning Configuration rules can drastically change the way gitlint behaves and are typically only needed for more advanced use-cases. We recommend you double check: Whether gitlint already supports your use-case out-of-the-box (special call-out for ignore rules which allow you to ignore (parts) of your commit message). Whether there's a Contrib Rule that implements your use-case. Whether you can implement your use-case using a regular Commit or Line user-defined rule (see above). As with other user-defined rules, the easiest way to get started is by copying my_configuration.py from the examples directory and modifying it to fit your need. # -*- coding: utf-8 -*- from gitlint.rules import ConfigurationRule from gitlint.options import IntOption class ReleaseConfigurationRule(ConfigurationRule): \"\"\" This rule will modify gitlint's behavior for Release Commits. This example might not be the most realistic for a real-world scenario, but is meant to give an overview of what's possible. \"\"\" # A rule MUST have a human friendly name name = \"release-configuration-rule\" # A rule MUST have a *unique* id, we recommend starting with UCR # (for User-defined Configuration-Rule), but this can really be anything. id = \"UCR1\" # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [IntOption('custom-verbosity', 2, \"Gitlint verbosity for release commits\")] def apply(self, config, commit): self.log.debug(\"ReleaseConfigurationRule: This will be visible when running `gitlint --debug`\") # If the commit title starts with 'Release', we want to modify # how all subsequent rules interpret that commit if commit.message.title.startswith(\"Release\"): # If your Release commit messages are auto-generated, the # body might contain trailing whitespace. Let's ignore that config.ignore.append(\"body-trailing-whitespace\") # Similarly, the body lines might exceed 80 chars, # let's set gitlint's limit to 200 # To set rule options use: # config.set_rule_option(<rule-name>, <rule-option>, <value>) config.set_rule_option(\"body-max-line-length\", \"line-length\", 200) # For kicks, let's set gitlint's verbosity to 2 # To set general options use # config.set_general_option(<general-option>, <value>) config.set_general_option(\"verbosity\", 2) # We can also use custom options to make this configurable config.set_general_option(\"verbosity\", self.options['custom-verbosity'].value) # Strip any lines starting with $ from the commit message # (this only affects how gitlint sees your commit message, it does # NOT modify your actual commit in git) commit.message.body = [line for line in commit.message.body if not line.startswith(\"$\")] # You can add any extra properties you want to the commit object, # these will be available later on in all rules. commit.my_property = \"This is my property\" For all available properties and methods on the config object, have a look at the LintConfig class . Please do not use any properties or methods starting with an underscore, as those are subject to change. Rule requirements As long as you stick with simple rules that are similar to the sample user-defined rules (see the examples directory), gitlint should be able to discover and execute them. While clearly you can run any python code you want in your rules, you might run into some issues if you don't follow the conventions that gitlint requires. While the rule finding source-code is the ultimate source of truth, here are some of the requirements that gitlint enforces. Rule class requirements Rules must extend from LineRule , CommitRule or ConfigurationRule Rule classes must have id and name string attributes. The options_spec is optional, but if set, it must be a list of gitlint Options. CommitRule and LineRule classes must have a validate method. In case of a CommitRule , validate must take a single commit parameter. In case of LineRule , validate must take line and commit as first and second parameters. ConfigurationRule classes must have an apply method that take config and commit as first and second parameters. LineRule classes must have a target class attributes that is set to either CommitMessageTitle or CommitMessageBody . User Rule id's cannot start with R , T , B , M or I as these rule ids are reserved for gitlint itself. Rules should have a case-insensitive unique id as only one rule can exist with a given id. While gitlint does not enforce this, having multiple rules with the same id might lead to unexpected or undeterministic behavior. extra-path requirements If extra-path is a directory, it does not need to be a proper python package, i.e. it doesn't require an __init__.py file. Python files containing user-defined rules must have a .py extension. Files with a different extension will be ignored. The extra-path will be searched non-recursively, i.e. all rule classes must be present at the top level extra-path directory. User rule classes must be defined in the modules that are part of extra-path , rules that are imported from outside the extra-path will be ignored.",
		"title": "User Defined Rules"
	}, {
		"location": "user_defined_rules/#user-defined-rules",
		"text": "Introduced in gitlint v0.8.0 Gitlint supports the concept of user-defined rules: the ability for users to write their own custom rules in python. In a nutshell, use --extra-path /home/joe/myextensions to point gitlint to a myextensions directory where it will search for python files containing gitlint rule classes. You can also specify a single python module, ie --extra-path /home/joe/my_rules.py . cat examples/commit-message-1 | gitlint --extra-path examples/ # Example output of a user-defined Signed-off-by rule 1: UC2 Body does not contain a 'Signed-off-by Line' # other violations were removed for brevity The SignedOffBy user-defined CommitRule was discovered by gitlint when it scanned examples/gitlint/my_commit_rules.py , which is part of the examples directory that was passed via --extra-path : # -*- coding: utf-8 -*- from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): \"\"\" This rule will enforce that each commit contains a \"Signed-off-by\" line. We keep things simple here and just check whether the commit body contains a line that starts with \"Signed-off-by\". \"\"\" # A rule MUST have a human friendly name name = \"body-requires-signed-off-by\" # A rule MUST have a *unique* id, we recommend starting with UC # (for User-defined Commit-rule). id = \"UC2\" def validate(self, commit): self.log.debug(\"SignedOffBy: This will be visible when running `gitlint --debug`\") for line in commit.message.body: if line.startswith(\"Signed-off-by\"): return msg = \"Body does not contain a 'Signed-off-by' line\" return [RuleViolation(self.id, msg, line_nr=1)] As always, --extra-path can also be set by adding it under the [general] section in your .gitlint file or using one of the other ways to configure gitlint . If you want to check whether your rules are properly discovered by gitlint, you can use the --debug flag: $ gitlint --debug --extra-path examples/ # [output cut for brevity] UC1: body-max-line-count body-max-line-count=3 UC2: body-requires-signed-off-by UL1: title-no-special-chars special-chars=['$', '^', '%', '@', '!', '*', '(', ')'] Note In most cases it's really the easiest to just copy an example from the examples directory and modify it to your needs. The remainder of this page contains the technical details, mostly for reference.",
		"title": "User Defined Rules"
	}, {
		"location": "user_defined_rules/#line-and-commit-rules",
		"text": "The SignedOffBy class above was an example of a user-defined CommitRule . Commit rules are gitlint rules that act on the entire commit at once. Once the rules are discovered, gitlint will automatically take care of applying them to the entire commit. This happens exactly once per commit. A CommitRule contrasts with a LineRule (see e.g.: examples/my_line_rules.py ) in that a CommitRule is only applied once on an entire commit while a LineRule is applied for every line in the commit (you can also apply it once to the title using a target - see the examples section below). The benefit of a commit rule is that it allows commit rules to implement more complex checks that span multiple lines and/or checks that should only be done once per commit. While every LineRule can be implemented as a CommitRule , it's usually easier and more concise to go with a LineRule if that fits your needs.",
		"title": "Line and Commit Rules"
	}, {
		"location": "user_defined_rules/#examples",
		"text": "In terms of code, writing your own CommitRule or LineRule is very similar. The only 2 differences between a CommitRule and a LineRule are the parameters of the validate(...) method and the extra target attribute that LineRule requires. Consider the following CommitRule that can be found in examples/my_commit_rules.py : # -*- coding: utf-8 -*- from gitlint.rules import CommitRule, RuleViolation class SignedOffBy(CommitRule): \"\"\" This rule will enforce that each commit contains a \"Signed-off-by\" line. We keep things simple here and just check whether the commit body contains a line that starts with \"Signed-off-by\". \"\"\" # A rule MUST have a human friendly name name = \"body-requires-signed-off-by\" # A rule MUST have a *unique* id, we recommend starting with UC # (for User-defined Commit-rule). id = \"UC2\" def validate(self, commit): self.log.debug(\"SignedOffBy: This will be visible when running `gitlint --debug`\") for line in commit.message.body: if line.startswith(\"Signed-off-by\"): return msg = \"Body does not contain a 'Signed-off-by' line\" return [RuleViolation(self.id, msg, line_nr=1)] Note the use of the name and id class attributes and the validate(...) method taking a single commit parameter. Contrast this with the following LineRule that can be found in examples/my_line_rules.py : # -*- coding: utf-8 -*- from gitlint.rules import LineRule, RuleViolation, CommitMessageTitle from gitlint.options import ListOption class SpecialChars(LineRule): \"\"\" This rule will enforce that the commit message title does not contai any of the following characters: $^%@!*() \"\"\" # A rule MUST have a human friendly name name = \"title-no-special-chars\" # A rule MUST have a *unique* id, we recommend starting with UL # for User-defined Line-rule), but this can really be anything. id = \"UL1\" # A line-rule MUST have a target (not required for CommitRules). target = CommitMessageTitle # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [ListOption('special-chars', ['$', '^', '%', '@', '!', '*', '(', ')'], \"Comma separated list of characters that should not occur in the title\")] def validate(self, line, _commit): self.log.debug(\"SpecialChars: This will be visible when running `gitlint --debug`\") violations = [] # options can be accessed by looking them up by their name in self.options for char in self.options['special-chars'].value: if char in line: msg = f\"Title contains the special character '{char}'\" violation = RuleViolation(self.id, msg, line) violations.append(violation) return violations Note the following 2 differences: extra target class attribute : in this example set to CommitMessageTitle indicating that this LineRule should only be applied once to the commit message title. The alternative value for target is CommitMessageBody , in which case gitlint will apply your rule to every line in the commit message body. validate(...) takes 2 parameters : Line rules get the line against which they are applied as the first parameter and the commit object of which the line is part of as second. In addition, you probably also noticed the extra options_spec class attribute which allows you to make your rules configurable. Options are not unique to LineRule s, they can also be used by CommitRule s and are further explained in the Options section below.",
		"title": "Examples"
	}, {
		"location": "user_defined_rules/#the-commit-object",
		"text": "Both CommitRule s and LineRule s take a commit object in their validate(...) methods. The table below outlines the various attributes of that commit object that can be used during validation. Property Type Description commit.message object Python object representing the commit message commit.message.original string Original commit message as returned by git commit.message.full string Full commit message, with comments (lines starting with #) removed. commit.message.title string Title/subject of the commit message: the first line commit.message.body string[] List of lines in the body of the commit message (i.e. starting from the second line) commit.author_name string Name of the author, result of git log --pretty=%aN commit.author_email string Email of the author, result of git log --pretty=%aE commit.date datetime Python datetime object representing the time of commit commit.is_merge_commit boolean Boolean indicating whether the commit is a merge commit or not. commit.is_revert_commit boolean Boolean indicating whether the commit is a revert commit or not. commit.is_fixup_commit boolean Boolean indicating whether the commit is a fixup commit or not. commit.is_squash_commit boolean Boolean indicating whether the commit is a squash commit or not. commit.parents string[] List of parent commit sha s (only for merge commits). commit.changed_files string[] List of files changed in the commit (relative paths). commit.branches string[] List of branch names the commit is part of commit.context object Object pointing to the bigger git context that the commit is part of commit.context.current_branch string Name of the currently active branch (of local repo) commit.context.repository_path string Absolute path pointing to the git repository being linted commit.context.commits object[] List of commits gitlint is acting on, NOT all commits in the repo.",
		"title": "The commit object"
	}, {
		"location": "user_defined_rules/#violations",
		"text": "In order to let gitlint know that there is a violation in the commit being linted, users should have the validate(...) method in their rules return a list of RuleViolation s. Important The validate(...) method doesn't always need to return a list, you can just skip the return statement in case there are no violations. However, in case of a single violation, validate should return a list with a single item. The RuleViolation class has the following generic signature: RuleViolation(rule_id, message, content=None, line_nr=None): With the parameters meaning the following: Parameter Type Description rule_id string Rule's unique string id message string Short description of the violation content string (optional) the violating part of commit or line line_nr int (optional) line number in the commit message where the violation occurs. Automatically set to the correct line number for LineRule s if not set explicitly. A typical validate(...) implementation for a CommitRule would then be as follows: def validate(self, commit) for line_nr, line in commit.message.body: if \"Jon Snow\" in line: # we add 1 to the line_nr because we offset the title which is on the first line return [RuleViolation(self.id, \"Commit message has the words 'Jon Snow' in it\", line, line_nr + 1)] return [] The parameters of this RuleViolation can be directly mapped onto gitlint's output as follows:",
		"title": "Violations"
	}, {
		"location": "user_defined_rules/#options",
		"text": "In order to make your own rules configurable, you can add an optional options_spec attribute to your rule class (supported for both LineRule and CommitRule ). # -*- coding: utf-8 -*- from gitlint.rules import CommitRule, RuleViolation from gitlint.options import IntOption class BodyMaxLineCount(CommitRule): # A rule MUST have a human friendly name name = \"body-max-line-count\" # A rule MUST have a *unique* id, we recommend starting with UC (for # User-defined Commit-rule). id = \"UC1\" # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [IntOption('max-line-count', 3, \"Maximum body line count\")] def validate(self, commit): line_count = len(commit.message.body) max_line_count = self.options['max-line-count'].value if line_count > max_line_count: message = f\"Body contains too many lines ({line_count} > {max_line_count})\" return [RuleViolation(self.id, message, line_nr=1)] By using options_spec , you make your option available to be configured through a .gitlint file or one of the other ways to configure gitlint . Gitlint automatically takes care of the parsing and input validation. For example, to change the value of the max-line-count option, add the following to your .gitlint file: [body-max-line-count] body-max-line-count=1 As options_spec is a list, you can obviously have multiple options per rule. The general signature of an option is: Option(name, default_value, description) . Gitlint supports a variety of different option types, all can be imported from gitlint.options : Option Class Use for StrOption Strings IntOption Integers. IntOption takes an optional allow_negative parameter if you want to allow negative integers. BoolOption Booleans. Valid values: true , false . Case-insensitive. ListOption List of strings. Comma separated. PathOption Directory or file path. Takes an optional type parameter for specifying path type ( file , dir (=default) or both ). RegexOption String representing a Python-style regex - compiled and validated before rules are applied. Note Gitlint currently does not support options for all possible types (e.g. float, list of int, etc). We could use a hand getting those implemented !",
		"title": "Options"
	}, {
		"location": "user_defined_rules/#configuration-rules",
		"text": "Introduced in gitlint v0.14.0 Configuration rules are special rules that are applied once per commit and BEFORE any other rules are run. Configuration rules are meant to dynamically change gitlint's configuration and/or the commit that is about to be linted. A typically use-case for this is when you want to modifying gitlint's behavior for all rules against a commit matching specific circumstances. Warning Configuration rules can drastically change the way gitlint behaves and are typically only needed for more advanced use-cases. We recommend you double check: Whether gitlint already supports your use-case out-of-the-box (special call-out for ignore rules which allow you to ignore (parts) of your commit message). Whether there's a Contrib Rule that implements your use-case. Whether you can implement your use-case using a regular Commit or Line user-defined rule (see above). As with other user-defined rules, the easiest way to get started is by copying my_configuration.py from the examples directory and modifying it to fit your need. # -*- coding: utf-8 -*- from gitlint.rules import ConfigurationRule from gitlint.options import IntOption class ReleaseConfigurationRule(ConfigurationRule): \"\"\" This rule will modify gitlint's behavior for Release Commits. This example might not be the most realistic for a real-world scenario, but is meant to give an overview of what's possible. \"\"\" # A rule MUST have a human friendly name name = \"release-configuration-rule\" # A rule MUST have a *unique* id, we recommend starting with UCR # (for User-defined Configuration-Rule), but this can really be anything. id = \"UCR1\" # A rule MAY have an option_spec if its behavior should be configurable. options_spec = [IntOption('custom-verbosity', 2, \"Gitlint verbosity for release commits\")] def apply(self, config, commit): self.log.debug(\"ReleaseConfigurationRule: This will be visible when running `gitlint --debug`\") # If the commit title starts with 'Release', we want to modify # how all subsequent rules interpret that commit if commit.message.title.startswith(\"Release\"): # If your Release commit messages are auto-generated, the # body might contain trailing whitespace. Let's ignore that config.ignore.append(\"body-trailing-whitespace\") # Similarly, the body lines might exceed 80 chars, # let's set gitlint's limit to 200 # To set rule options use: # config.set_rule_option(<rule-name>, <rule-option>, <value>) config.set_rule_option(\"body-max-line-length\", \"line-length\", 200) # For kicks, let's set gitlint's verbosity to 2 # To set general options use # config.set_general_option(<general-option>, <value>) config.set_general_option(\"verbosity\", 2) # We can also use custom options to make this configurable config.set_general_option(\"verbosity\", self.options['custom-verbosity'].value) # Strip any lines starting with $ from the commit message # (this only affects how gitlint sees your commit message, it does # NOT modify your actual commit in git) commit.message.body = [line for line in commit.message.body if not line.startswith(\"$\")] # You can add any extra properties you want to the commit object, # these will be available later on in all rules. commit.my_property = \"This is my property\" For all available properties and methods on the config object, have a look at the LintConfig class . Please do not use any properties or methods starting with an underscore, as those are subject to change.",
		"title": "Configuration Rules"
	}, {
		"location": "user_defined_rules/#rule-requirements",
		"text": "As long as you stick with simple rules that are similar to the sample user-defined rules (see the examples directory), gitlint should be able to discover and execute them. While clearly you can run any python code you want in your rules, you might run into some issues if you don't follow the conventions that gitlint requires. While the rule finding source-code is the ultimate source of truth, here are some of the requirements that gitlint enforces.",
		"title": "Rule requirements"
	}, {
		"location": "user_defined_rules/#rule-class-requirements",
		"text": "Rules must extend from LineRule , CommitRule or ConfigurationRule Rule classes must have id and name string attributes. The options_spec is optional, but if set, it must be a list of gitlint Options. CommitRule and LineRule classes must have a validate method. In case of a CommitRule , validate must take a single commit parameter. In case of LineRule , validate must take line and commit as first and second parameters. ConfigurationRule classes must have an apply method that take config and commit as first and second parameters. LineRule classes must have a target class attributes that is set to either CommitMessageTitle or CommitMessageBody . User Rule id's cannot start with R , T , B , M or I as these rule ids are reserved for gitlint itself. Rules should have a case-insensitive unique id as only one rule can exist with a given id. While gitlint does not enforce this, having multiple rules with the same id might lead to unexpected or undeterministic behavior.",
		"title": "Rule class requirements"
	}, {
		"location": "user_defined_rules/#extra-path-requirements",
		"text": "If extra-path is a directory, it does not need to be a proper python package, i.e. it doesn't require an __init__.py file. Python files containing user-defined rules must have a .py extension. Files with a different extension will be ignored. The extra-path will be searched non-recursively, i.e. all rule classes must be present at the top level extra-path directory. User rule classes must be defined in the modules that are part of extra-path , rules that are imported from outside the extra-path will be ignored.",
		"title": "extra-path requirements"
	}]
}